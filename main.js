(()=>{"use strict";const t=function(t){this.data=t};var e;!function(t){t[t.BOTTLE=0]="BOTTLE",t[t.FIRE=1]="FIRE"}(e||(e={}));const n=function(){function t(t,e,n,r){void 0===r&&(r=!0),this.id=Symbol(),this.type=t,this.x=e,this.y=n,this.held=!1,this.used=!1,this.collectible=r}return t.prototype.use=function(t,e){this.used=!0},t.prototype.drop=function(t,e){this.held=!1,this.x=t.x,this.y=t.y},t.prototype.moveTo=function(t,e){this.x=t,this.y=e},t.prototype.refurbish=function(){this.used=!1},t}();var r,o,i=Math.floor,a=Math.ceil,c=Math.random,l=(r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});!function(t){t[t.AIR=0]="AIR",t[t.WATER=1]="WATER"}(o||(o={}));const u=function(t){function n(n,r,o,i,a){void 0===i&&(i=100),void 0===a&&(a=100);var c=t.call(this,e.BOTTLE,r,o)||this;return c._content=0,c.filledWith=n,c.volume=i,c.content=a,c}return l(n,t),Object.defineProperty(n.prototype,"content",{get:function(){return this._content},set:function(t){this._content=function(t,e,n){return Math.min(n,Math.max(0,t))}(t,0,this.volume),0===this._content&&(this.filledWith=o.AIR)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isEmpty",{get:function(){return 0===this.content||this.filledWith===o.AIR},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"hasContent",{get:function(){return this.isEmpty},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isFull",{get:function(){return this.content===this.volume&&this.filledWith!==o.AIR},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"percentFull",{get:function(){return this.content/this.volume},enumerable:!1,configurable:!0}),n.prototype.canAdd=function(t){return!this.isFull&&(t===this.filledWith||this.filledWith===o.AIR)},n.prototype.fillWith=function(t,e){this.canAdd(t)||this.dump(),this.filledWith=t;var n=this.isEmpty?0:this.content,r=null!=e?e:this.volume;this.content=n+r},n.prototype.dump=function(){this.content=0,this.filledWith=o.AIR},n.prototype.resize=function(t){this.volume=t,this.content=this.content},n.prototype.use=function(t,e){switch(this.filledWith){case o.AIR:break;case o.WATER:var n=t.data.hydration;t.hydrate(this.content);var r=t.data.hydration-n;this.content-=r}this.isEmpty&&(this.used=!0)},n}(n);var s=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const p=function(t){function n(n,r){return t.call(this,e.FIRE,n,r,!1)||this}return s(n,t),n.prototype.use=function(e,n){t.prototype.use.call(this,e,n),this.refurbish(),e.data.sitting=!0,e.face(this.x,this.y)},n}(n);function f(t,e){for(var n=t.length-1;n>=0;n--)if(e(t[n],n))return t[n]}function h(t,e){var n=t.get(e);return n||(n=new Set,t.set(e,n)),n}function d(t,e){var n=new Int16Array(2);return n[0]=t,n[1]=e,n}function y(t,e,n,r){var o=n-t,i=r-e;return Math.sqrt(Math.pow(o,2)+Math.pow(i,2))}function _(t,e,n,r,o,i){return n<=t&&t<=n+i&&r<=e&&e<=r+o}function v(t,e,n,r){r||(r=n,n=0);var o,a=c()*(2*Math.PI),l=n/r,u=r*Math.sqrt((1,(o=Math.pow(l,2))+c()*(1-o)));return d(i(t+u*Math.cos(a)),i(e+u*Math.sin(a)))}const w=function(){function t(){this.itemsById=new Map,this.idsByType=new Map,this.graveyard=new Map}return t.prototype.add=function(t){this.itemsById.set(t.id,t),this.idsFor(t.type).add(t.id)},t.prototype.delete=function(t){this.itemsById.delete(t.id),this.idsFor(t.type).delete(t.id)},t.prototype.kill=function(t){this.graveyardFor(t.constructor).push(t),this.delete(t)},t.prototype.resurrect=function(t){var e=this.graveyardFor(t).pop();if(e)return e.refurbish(),e.held=!1,this.add(e),e},t.prototype.createBottle=function(t,e,n,r,o){var i=this.resurrect(u);return i?(i.moveTo(e,n),i.dump(),(r||0===r)&&i.resize(r),(o||0===o)&&i.fillWith(t,o),i):(i=new u(t,e,n,r,o),this.add(i),i)},t.prototype.createFire=function(t,e){var n=this.resurrect(p);if(!n){var r=new p(t,e);return this.add(r),r}return n.x=t,n.y=e,n},t.prototype.idsFor=function(t){return h(this.idsByType,t)},t.prototype.graveyardFor=function(t){return e=this.graveyard,n=t,(r=e.get(n))||(r=[],e.set(n,r)),r;var e,n,r},t.prototype.find=function(t){var e=this.itemsById.get(t);if(!e)throw new Error("No item registered for the given ID");return e},t.prototype.forEachOfType=function(t,e){var n=this;this.idsFor(t).forEach((function(t){e(n.find(t))}))},t.prototype.findOfType=function(t,e){for(var n=this.idsFor(t).values(),r=n.next();!r.done;){var o=this.find(r.value);if(e(o))return o;r=n.next()}},t.prototype.findInAllItems=function(t){for(var e=this.itemsById.values(),n=e.next();!n.done;){if(t(n.value))return n.value;n=e.next()}},t.prototype.findClosest=function(t,e,n,r){var o,i=void 0,a=this.findOfType(t,(function(t){if(t.held||r&&!r(t))return!1;if(t.x===e&&t.y===n)return!0;var a=y(e,n,t.x,t.y);return null!=i||(i=t),null!=o||(o=a),a<o&&(o=a,i=t),!1}));return null!=a?a:i},t.prototype.itemAt=function(t,e,n,r){var o=void 0,i=n+1,a=this.findInAllItems((function(n){if(n.held||r&&!r(n))return!1;if(n.x===t&&n.y===e)return!0;var a=y(t,e,n.x,n.y);return a<i&&(i=a,o=n),!1}));return null!=a?a:o},t}(),T=function(){function t(t,e,n){this.rowCount=t,this.colCount=e,this.colPower=a(Math.log2(e)),this.paddedColCount=1<<this.colPower;var r=t<<this.colPower;this.cells=new n(r)}return t.prototype.rowAtIndex=function(t){return t>>this.colPower},t.prototype.colAtIndex=function(t){return t&this.paddedColCount-1},t.prototype.indexAt=function(t,e){return(t<<this.colPower)+e},t.prototype.valueAt=function(t,e){var n=this.indexAt(t,e);return this.cells[n]},t.prototype.setValueAt=function(t,e,n){var r=this.indexAt(t,e);this.cells[r]=n},t.prototype.delValueAt=function(t,e){this.setValueAt(t,e,0)},t.prototype.clearValues=function(){this.cells.fill(0)},t.prototype.incValueAt=function(t,e){var n=this.indexAt(t,e);return++this.cells[n]},t.prototype.decValueAt=function(t,e){var n=this.indexAt(t,e);return--this.cells[n]},t.prototype.each=function(t){for(var e=0;e<this.rowCount;e++)for(var n=0;n<this.colCount;n++)t(e,n,this.valueAt(e,n))},t.prototype.fill=function(t){for(var e=0;e<this.rowCount;e++)for(var n=0;n<this.colCount;n++){var r=this.indexAt(e,n);this.cells[r]=t(e,n,this.cells[r])}},t}(),g=.5*(Math.sqrt(3)-1),b=(3-Math.sqrt(3))/6,O=1/6,I=(Math.sqrt(5)-1)/4,m=(5-Math.sqrt(5))/20,A=new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),R=new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]),P=class{constructor(t=Math.random){const e="function"==typeof t?t:function(t){let e=0,n=0,r=0,o=1;const i=function(){let t=4022871197;return function(e){e=e.toString();for(let n=0;n<e.length;n++){t+=e.charCodeAt(n);let r=.02519603282416938*t;t=r>>>0,r-=t,r*=t,t=r>>>0,r-=t,t+=4294967296*r}return 2.3283064365386963e-10*(t>>>0)}}();return e=i(" "),n=i(" "),r=i(" "),e-=i(t),e<0&&(e+=1),n-=i(t),n<0&&(n+=1),r-=i(t),r<0&&(r+=1),function(){const t=2091639*e+2.3283064365386963e-10*o;return e=n,n=r,r=t-(o=0|t)}}(t);this.p=function(t){const e=new Uint8Array(256);for(let t=0;t<256;t++)e[t]=t;for(let n=0;n<255;n++){const r=n+~~(t()*(256-n)),o=e[n];e[n]=e[r],e[r]=o}return e}(e),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(let t=0;t<512;t++)this.perm[t]=this.p[255&t],this.permMod12[t]=this.perm[t]%12}noise2D(t,e){const n=this.permMod12,r=this.perm;let o=0,i=0,a=0;const c=(t+e)*g,l=Math.floor(t+c),u=Math.floor(e+c),s=(l+u)*b,p=t-(l-s),f=e-(u-s);let h,d;p>f?(h=1,d=0):(h=0,d=1);const y=p-h+b,_=f-d+b,v=p-1+2*b,w=f-1+2*b,T=255&l,O=255&u;let I=.5-p*p-f*f;if(I>=0){const t=3*n[T+r[O]];I*=I,o=I*I*(A[t]*p+A[t+1]*f)}let m=.5-y*y-_*_;if(m>=0){const t=3*n[T+h+r[O+d]];m*=m,i=m*m*(A[t]*y+A[t+1]*_)}let R=.5-v*v-w*w;if(R>=0){const t=3*n[T+1+r[O+1]];R*=R,a=R*R*(A[t]*v+A[t+1]*w)}return 70*(o+i+a)}noise3D(t,e,n){const r=this.permMod12,o=this.perm;let i,a,c,l;const u=.3333333333333333*(t+e+n),s=Math.floor(t+u),p=Math.floor(e+u),f=Math.floor(n+u),h=(s+p+f)*O,d=t-(s-h),y=e-(p-h),_=n-(f-h);let v,w,T,g,b,I;d>=y?y>=_?(v=1,w=0,T=0,g=1,b=1,I=0):d>=_?(v=1,w=0,T=0,g=1,b=0,I=1):(v=0,w=0,T=1,g=1,b=0,I=1):y<_?(v=0,w=0,T=1,g=0,b=1,I=1):d<_?(v=0,w=1,T=0,g=0,b=1,I=1):(v=0,w=1,T=0,g=1,b=1,I=0);const m=d-v+O,R=y-w+O,P=_-T+O,S=d-g+2*O,N=y-b+2*O,L=_-I+2*O,G=d-1+.5,F=y-1+.5,E=_-1+.5,C=255&s,j=255&p,W=255&f;let K=.6-d*d-y*y-_*_;if(K<0)i=0;else{const t=3*r[C+o[j+o[W]]];K*=K,i=K*K*(A[t]*d+A[t+1]*y+A[t+2]*_)}let M=.6-m*m-R*R-P*P;if(M<0)a=0;else{const t=3*r[C+v+o[j+w+o[W+T]]];M*=M,a=M*M*(A[t]*m+A[t+1]*R+A[t+2]*P)}let x=.6-S*S-N*N-L*L;if(x<0)c=0;else{const t=3*r[C+g+o[j+b+o[W+I]]];x*=x,c=x*x*(A[t]*S+A[t+1]*N+A[t+2]*L)}let B=.6-G*G-F*F-E*E;if(B<0)l=0;else{const t=3*r[C+1+o[j+1+o[W+1]]];B*=B,l=B*B*(A[t]*G+A[t+1]*F+A[t+2]*E)}return 32*(i+a+c+l)}noise4D(t,e,n,r){const o=this.perm;let i,a,c,l,u;const s=(t+e+n+r)*I,p=Math.floor(t+s),f=Math.floor(e+s),h=Math.floor(n+s),d=Math.floor(r+s),y=(p+f+h+d)*m,_=t-(p-y),v=e-(f-y),w=n-(h-y),T=r-(d-y);let g=0,b=0,O=0,A=0;_>v?g++:b++,_>w?g++:O++,_>T?g++:A++,v>w?b++:O++,v>T?b++:A++,w>T?O++:A++;const P=g>=3?1:0,S=b>=3?1:0,N=O>=3?1:0,L=A>=3?1:0,G=g>=2?1:0,F=b>=2?1:0,E=O>=2?1:0,C=A>=2?1:0,j=g>=1?1:0,W=b>=1?1:0,K=O>=1?1:0,M=A>=1?1:0,x=_-P+m,B=v-S+m,H=w-N+m,k=T-L+m,D=_-G+2*m,U=v-F+2*m,X=w-E+2*m,z=T-C+2*m,Y=_-j+3*m,V=v-W+3*m,q=w-K+3*m,J=T-M+3*m,Q=_-1+4*m,Z=v-1+4*m,$=w-1+4*m,tt=T-1+4*m,et=255&p,nt=255&f,rt=255&h,ot=255&d;let it=.6-_*_-v*v-w*w-T*T;if(it<0)i=0;else{const t=o[et+o[nt+o[rt+o[ot]]]]%32*4;it*=it,i=it*it*(R[t]*_+R[t+1]*v+R[t+2]*w+R[t+3]*T)}let at=.6-x*x-B*B-H*H-k*k;if(at<0)a=0;else{const t=o[et+P+o[nt+S+o[rt+N+o[ot+L]]]]%32*4;at*=at,a=at*at*(R[t]*x+R[t+1]*B+R[t+2]*H+R[t+3]*k)}let ct=.6-D*D-U*U-X*X-z*z;if(ct<0)c=0;else{const t=o[et+G+o[nt+F+o[rt+E+o[ot+C]]]]%32*4;ct*=ct,c=ct*ct*(R[t]*D+R[t+1]*U+R[t+2]*X+R[t+3]*z)}let lt=.6-Y*Y-V*V-q*q-J*J;if(lt<0)l=0;else{const t=o[et+j+o[nt+W+o[rt+K+o[ot+M]]]]%32*4;lt*=lt,l=lt*lt*(R[t]*Y+R[t+1]*V+R[t+2]*q+R[t+3]*J)}let ut=.6-Q*Q-Z*Z-$*$-tt*tt;if(ut<0)u=0;else{const t=o[et+1+o[nt+1+o[rt+1+o[ot+1]]]]%32*4;ut*=ut,u=ut*ut*(R[t]*Q+R[t+1]*Z+R[t+2]*$+R[t+3]*tt)}return 27*(i+a+c+l+u)}};var S=new P("continents"),N=new P("land"),L=new P("local");function G(t,e){return L.noise2D(t,e)}function F(t,e){return(1*function(t,e){return S.noise2D(t,e)}(1.75*t,1.75*e)+.75*function(t,e){return N.noise2D(t,e)}(5*t,5*e)+.25*G(16*t,16*e)+.25*G(32*t,32*e))/2.25}var E=new P("moisture");function C(t,e){return E.noise2D(t,e)}function j(t,e){void 0===e&&(e=.5);var n=1-e;return Math.pow(t,n)}var W=195+i(15),K=new P("flora"),M=function(t,e,n,r,o){this.x=t,this.y=e,this.distanceTraveled=n,this.distanceToEnd=r,this.parent=o,this.cost=n+r},x=function(){function t(t){this.cellBlocked=t,this.nodesToWalk=[],this.walkedNodes=[]}return t.prototype.reset=function(){this.nodesToWalk.length=0,this.walkedNodes.length=0},t.prototype.populatePath=function(t,e,n,r,o,a,c,l){var u=this;this.reset(),t.length=0,e=i(e),n=i(n),r=i(r),o=i(o),c=i(c);var s,p=this.nodesToWalk,h=this.walkedNodes,d=y(e,n,r,o);if(d>a&&(r=i(e+a/d*(r-e)),o=i(n+a/d*(o-n)),d=a),!this.cellBlocked(r,o))for(p.push(new M(e,n,0,d,null));p.length;){if((s=this.popLowestCostUnwalkedNode()).distanceToEnd<=c){var _=new M(r,o,s.distanceTraveled+s.distanceToEnd,0,s);return void this.unchainIntoPath(_,t,l)}if(s.distanceTraveled>4*a)return;h.push(s),this.forEachNeighborOf(s.x,s.y,c,(function(t,e,n){if(!u.cellBlocked(t,e)){var i=s.distanceTraveled+n;if(!f(h,(function(n){return n.x===t&&n.y===e}))){var a=f(p,(function(n){return n.x===t&&n.y===e}));if(a)a.parent=s,a.distanceTraveled=i,a.cost=i+a.distanceToEnd;else{var c=y(t,e,r,o);p.push(new M(t,e,i,c,s))}}}}))}},t.prototype.popLowestCostUnwalkedNode=function(){var t=this.nodesToWalk;if(0!==t.length){if(1===t.length)return t.pop();for(var e=0,n=t[e],r=1;r<t.length;r++){var o=t[r];o.cost<n.cost&&(e=r,n=o)}return t.splice(e,1),n}},t.prototype.unchainIntoPath=function(t,e,n){e.push(t),n&&n(t),t.parent&&this.unchainIntoPath(t.parent,e,n)},t.prototype.forEachNeighborOf=function(t,e,n,r){var o,i=n,a=1.4142135623730951*i;r(t-n,o=e-n,a),r(t,o,i),r(t+n,o,a),r(t-n,o=e,i),r(t+n,o,i),r(t-n,o=e+n,a),r(t,o,i),r(t+n,o,a)},t}();const B=x;var H;function k(t,e,n){return t<<31-n-e}function D(t,e,n){var r=31-e;return t%Math.pow(2,r)>>r-n}!function(t){t[t.NONE=0]="NONE",t[t.TREE=1]="TREE"}(H||(H={}));const U=function(){function t(t,e,n){var r=this;this.tileSize=n,this.grid=new T(t,e,Uint32Array),this.pathFinder=new B((function(t,e){return!r.walkableAt(t,e)}))}return t.fillWithTerrain=function(t){var e=this;t.fill((function(n,r,o){var a=r/t.colCount,c=n/t.rowCount,l=e.noiseToByte(F(a,c)),u=l<128,s=i(Math.max(l-191,0)/64*255),p=(128-Math.abs(l-128))/128*204,f=Math.max(p,e.noiseToByte(C(a,c))-s),h=function(t,e){return(1.5*F(t,e)+.25*C(t,e)+1*K.noise2D(20*t,20*e)+1*K.noise2D(70*t,70*e))/2.5}(a,c),d=h>.25&&l<W&&l-128>2?H.TREE:H.NONE;return e.tileValue(l,f,d,u)}))},t.eachTile=function(t,e){var n=this;t.each((function(t,r,o){e(t,r,n.elevationFromTileValue(o),n.moistureFromTileValue(o),n.structureFromTileValue(o),n.underwaterFromTileValue(o))}))},t.feedMapper=function(t,e,n,r){var o=t.valueAt(e,n);return r(e,n,this.elevationFromTileValue(o),this.moistureFromTileValue(o),this.structureFromTileValue(o),this.underwaterFromTileValue(o))},t.eachNeighboringTile=function(e,n,r,o){var i,a;i=n-1,a=r-1,t.feedMapper(e,i,a,o),a=r,t.feedMapper(e,i,a,o),a=r+1,t.feedMapper(e,i,a,o),i=n,a=r-1,t.feedMapper(e,i,a,o),a=r+1,t.feedMapper(e,i,a,o),i=n+1,a=r-1,t.feedMapper(e,i,a,o),a=r,t.feedMapper(e,i,a,o),a=r+1,t.feedMapper(e,i,a,o)},t.noiseToByte=function(t){return i(128*(t+1))},t.tileValue=function(t,e,n,r){return k(t,0,8)|k(e,8,8)|k(n,16,8)|k(r?1:0,24,1)},t.elevationFromTileValue=function(t){return D(t,0,8)},t.moistureFromTileValue=function(t){return D(t,8,8)},t.structureFromTileValue=function(t){return D(t,16,8)},t.underwaterFromTileValue=function(t){return Boolean(D(t,24,1))},t.walkableFromTileValue=function(t){return!this.underwaterFromTileValue(t)&&!this.structureFromTileValue(t)},Object.defineProperty(t.prototype,"rowCount",{get:function(){return this.grid.rowCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"colCount",{get:function(){return this.grid.colCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.colCount*this.tileSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.rowCount*this.tileSize},enumerable:!1,configurable:!0}),t.prototype.xToCol=function(t){return i(t/this.tileSize)},t.prototype.yToRow=function(t){return i(t/this.tileSize)},t.prototype.fillWithTerrain=function(){t.fillWithTerrain(this.grid)},t.prototype.eachTile=function(e){t.eachTile(this.grid,e)},t.prototype.eachNeighboringTile=function(e,n,r){t.eachNeighboringTile(this.grid,e,n,r)},t.prototype.randomCoordsOnLand=function(){for(var e=this.width,n=this.height,r=0,o=0,a=-1;a<129;)r=i(c()*e),o=i(c()*n),a=t.elevationFromTileValue(this.valueAt(r,o));return d(r,o)},t.prototype.randomWalkableCoords=function(){for(var e=this.width,n=this.height,r=0,o=0,a=!1;!a;)r=i(c()*e),o=i(c()*n),a=t.walkableFromTileValue(this.valueAt(r,o));return d(r,o)},t.prototype.randomWalkableTileCoords=function(){var t=this.randomWalkableCoords();return t[0]=i(t[0]/this.tileSize),t[1]=i(t[1]/this.tileSize),t},t.prototype.populatePath=function(t,e,n,r,o,i){this.pathFinder.populatePath(t,e,n,r,o,i,this.tileSize)},t.prototype.valueAt=function(t,e){return this.grid.valueAt(this.yToRow(e),this.xToCol(t))},t.prototype.valueAtTile=function(t,e){return this.grid.valueAt(t,e)},t.prototype.inBounds=function(t,e){return 0<=t&&0<=e&&t<this.width&&e<this.height},t.prototype.walkableAt=function(e,n){return!!this.inBounds(e,n)&&t.walkableFromTileValue(this.valueAt(e,n))},t.prototype.underwaterAt=function(e,n){return t.underwaterFromTileValue(this.valueAt(e,n))||!this.inBounds(e,n)},t.prototype.tileIsTouched=function(t,e,n,r,o,i){var a=o*t,c=(o+1)*t,l=r*t,u=(r+1)*t;if(a<e){if(l<n){var s=y(e,n,a,l),p=y(e,n,c,u);return s>=i&&i>=p}var f=y(e,n,c,l);return y(e,n,a,u)>=i&&i>=f}return l<n?(f=y(e,n,c,l),y(e,n,a,u)<=i&&i<=f):(s=y(e,n,a,l),p=y(e,n,c,u),s<=i&&i<=p)},t.prototype.eachTileAtDistanceFrom=function(e,n,r,o){for(var i=this.tileSize,a=this.xToCol(e),c=this.yToRow(n),l=this.xToCol(e-r),u=c,s=!1,p=l,f=u;!s||p!==l||f!==u;)if(s=!0,t.feedMapper(this.grid,f,p,o),p<a)if(f<c)if(this.tileIsTouched(i,e,n,f-1,p,r))f-=1;else if(this.tileIsTouched(i,e,n,f,p+1,r))p+=1;else{if(!this.tileIsTouched(i,e,n,f-1,p+1,r))throw new Error("How the hell did that happen?");f-=1,p+=1}else if(this.tileIsTouched(i,e,n,f,p-1,r))p-=1;else if(this.tileIsTouched(i,e,n,f-1,p,r))f-=1;else{if(!this.tileIsTouched(i,e,n,f-1,p-1,r))throw new Error("How the hell did that happen?");f-=1,p-=1}else if(f<c)if(this.tileIsTouched(i,e,n,f,p+1,r))p+=1;else if(this.tileIsTouched(i,e,n,f+1,p,r))f+=1;else{if(!this.tileIsTouched(i,e,n,f+1,p+1,r))throw new Error("How the hell did that happen?");f+=1,p+=1}else if(this.tileIsTouched(i,e,n,f+1,p,r))f+=1;else if(this.tileIsTouched(i,e,n,f,p-1,r))p-=1;else{if(!this.tileIsTouched(i,e,n,f+1,p-1,r))throw new Error("How the hell did that happen?");f+=1,p-=1}},t}();var X=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),z=function(t){function e(e){return t.call(this,e)||this}return X(e,t),e.isDawn=function(t){return.2<=t&&t<=.3},e.isDay=function(t){return.25<=t&&t<=.75},e.isDusk=function(t){return.7<=t&&t<=.8},e.isNight=function(t){return!e.isDay(t)},Object.defineProperty(e.prototype,"dayElapsed",{get:function(){var t=this.data,e=t.timestamp,n=t.dayLength;return(e+t.dayOffset)%n/n},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDawn",{get:function(){return e.isDawn(this.dayElapsed)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDay",{get:function(){return e.isDay(this.dayElapsed)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDusk",{get:function(){return e.isDusk(this.dayElapsed)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isNight",{get:function(){return e.isNight(this.dayElapsed)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"daylight",{get:function(){return this.isDawn?(this.dayElapsed-.2)/.1:this.isDusk?1-(this.dayElapsed-.7)/.1:this.isDay?1:0},enumerable:!1,configurable:!0}),e.prototype.rotateWorld=function(t){this.data.dayOffset+=i(t*this.data.dayLength)},e.prototype.letItBeDay=function(){this.isDawn||(this.isDay?this.setTimeOfDay(.25):this.setTimeOfDay(.2))},e.prototype.letItBeNight=function(){this.isDusk||(this.isNight?this.setTimeOfDay(.75):this.setTimeOfDay(.7))},e.prototype.setTimeOfDay=function(t){var e=this.data,n=e.timestamp,r=e.dayLength,o=e.dayOffset,a=i(t*r),c=(n+o)%r;this.data.dayOffset+=a-c},e.prototype.findClosestMudman=function(t,e,n){var r=this.data.mudmen,o=r.length;if(0!==o){if(1===o){var i=r[0];return!n||n(i)?i:void 0}for(var a=void 0,c=void 0,l=0;l<o;l++)if(i=r[l],!n||n(i)){if(i.local.x===t&&i.local.y===e)return i;var u=y(t,e,i.local.x,i.local.y);(!c||u<c)&&(a=i,c=u)}return a}},e.prototype.findClosestFellowMudman=function(t){return this.findClosestMudman(t.x,t.y,(function(e){return e.local!==t}))},e}(t),Y=new w,V=new U(512,512,32);V.fillWithTerrain();for(var q=0;q<1e3;q++){var J=V.randomWalkableCoords();Y.createBottle(o.WATER,J[0],J[1],100,i(100*Math.random()))}for(q=0;q<1e3;q++)J=V.randomWalkableCoords(),Y.createFire(J[0],J[1]);Y.createFire(300,210);var Q=new z({timestamp:0,map:V,items:Y,mudmen:[],dayLength:24e3,dayOffset:6e3});const Z=function(){function t(t,e,n){this.root=t,this.current=t,this.world=n,this.local=e}return t.prototype.tick=function(){this.current.run(this.local,this.world)},t}();var $=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const tt=function(t){function e(n){return t.call(this,null!=n?n:e.defaults)||this}return $(e,t),Object.defineProperty(e,"defaults",{get:function(){return{currentX:0,currentY:0,path:[],unreachable:[],size:16,moveSpeed:5,hydration:10,warmth:50,social:0,eyesight:300,inventory:new Map,xDirection:1,yDirection:1,sitting:!1,targetedItem:null,talkingTo:null,movingTarget:null}},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x",{get:function(){return this.data.currentX},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y",{get:function(){return this.data.currentY},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hasPath",{get:function(){return this.data.path.length>0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"destination",{get:function(){return this.data.path[0]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isNearDestination",{get:function(){var t=this.destination;return!t||this.isNear(t.x,t.y)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"nearbyThreshold",{get:function(){return 5*this.data.moveSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"crowdingThreshold",{get:function(){return this.data.size},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"percentHydrated",{get:function(){return this.data.hydration/100},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"percentWarm",{get:function(){return this.data.warmth/100},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"percentSocial",{get:function(){return this.data.social/100},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"talking",{get:function(){return!!this.data.talkingTo},enumerable:!1,configurable:!0}),e.prototype.clearPath=function(){this.data.path.length=0,this.data.unreachable.length=0},e.prototype.setCurrentPosition=function(t,e){t=i(t),e=i(e),this.face(t,e),this.data.currentX===t&&this.data.currentY===e||(this.data.sitting=!1,this.data.talkingTo=null),this.data.currentX=t,this.data.currentY=e},e.prototype.face=function(t,e){var n=this.data,r=n.currentX,o=n.currentY;r===t?o!==e&&(this.data.xDirection=0):this.data.xDirection=r<t?1:-1,o!==e&&(this.data.yDirection=o<e?1:-1)},e.prototype.moveToward=function(t,e,n){var r=this.data,o=r.currentX,i=r.currentY,a=null!=n?n:this.data.moveSpeed,c=d(t-o,e-i),l=c[0],u=c[1],s=Math.sqrt(Math.pow(l,2)+Math.pow(u,2)),p=a>s?1:a/s,f=p*l,h=p*u;this.setCurrentPosition(o+f,i+h)},e.prototype.followPath=function(t){var e=this.data.path,n=null!=t?t:this.data.moveSpeed,r=e[e.length-1];if(r){if(r.x===this.x&&r.y===this.y)return e.pop(),void this.followPath(n);var o=y(this.x,this.y,r.x,r.y);o>n?this.moveToward(r.x,r.y,n):o<=n&&(this.setCurrentPosition(r.x,r.y),e.pop(),this.followPath(n-o))}else this.data.unreachable.length=0},e.prototype.dehydrate=function(t){void 0===t&&(t=1),this.data.hydration=Math.max(this.data.hydration-t,0)},e.prototype.hydrate=function(t){void 0===t&&(t=1),this.data.hydration=Math.min(this.data.hydration+t,100)},e.prototype.chill=function(t){void 0===t&&(t=1),this.data.warmth=Math.max(this.data.warmth-t,0)},e.prototype.toast=function(t){void 0===t&&(t=1),this.data.warmth=Math.min(this.data.warmth+t,100)},e.prototype.feelLonely=function(t){void 0===t&&(t=1),this.data.social=Math.min(this.data.social-t,100)},e.prototype.feelSocial=function(t){void 0===t&&(t=1),this.data.social=Math.min(this.data.social+t,100)},e.prototype.inventoryOf=function(t){return h(this.data.inventory,t)},e.prototype.isHoldingItem=function(t){return this.inventoryOf(t.type).has(t)},e.prototype.pickUp=function(t){t.collectible&&(t.held=!0,this.inventoryOf(t.type).add(t))},e.prototype.unusedFromInventory=function(t){for(var e=this.inventoryOf(t).values(),n=e.next();!n.done;){if(!n.value.used)return n.value;n=e.next()}},e.prototype.isUnreachable=function(t,e){return!!this.data.unreachable.find((function(n){return n[0]===t&&n[1]===e}))},e.prototype.isWithinEyesight=function(t,e){return y(this.x,this.y,t,e)<=this.data.eyesight},e.prototype.isNear=function(t,e){return y(this.x,this.y,t,e)<=this.nearbyThreshold},e.prototype.isCrowding=function(t,e){return y(this.x,this.y,t,e)<=this.crowdingThreshold},e.prototype.isAt=function(t,e){return this.x===t&&this.y===e},e.prototype.isOneStepAwayFrom=function(t,e){return y(this.x,this.y,t,e)<=this.data.moveSpeed},e.prototype.distanceTo=function(t,e){return y(this.x,this.y,t,e)},e.prototype.talkTo=function(t){if(this!==t.local){var e=t.local.data.talkingTo;e?this===e.local?this.data.talkingTo=t:this.data.talkingTo=e:(this.data.talkingTo=t,t.local.face(this.x,this.y));var n=this.data.talkingTo;this.face(n.local.x,n.local.y)}},e}(t);var et;!function(t){t[t.RUNNING=0]="RUNNING",t[t.SUCCESS=1]="SUCCESS",t[t.FAILURE=2]="FAILURE"}(et||(et={}));const nt=et,rt=function(){function t(){this.status=nt.RUNNING,this.level=0}return t.prototype.init=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},t.prototype.process=function(t,e){throw new Error("Method #process must be implemented by node classes.")},t.prototype.run=function(e,n){if(t.debug){var r=" |".repeat(this.level);console.log(r+"Processing node: "+this.constructor.name),this.process(e,n),console.log(r+"Processed. Result: "+this.status)}else this.process(e,n)},t.prototype.incrementLevel=function(){this.level+=1},Object.defineProperty(t.prototype,"succeeded",{get:function(){return this.status===nt.SUCCESS},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"failed",{get:function(){return this.status===nt.FAILURE},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"running",{get:function(){return this.status===nt.RUNNING},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"finished",{get:function(){return!this.running},enumerable:!1,configurable:!0}),t.prototype.succeed=function(){this.status=nt.SUCCESS},t.prototype.fail=function(){this.status=nt.FAILURE},t.prototype.reset=function(){this.status=nt.RUNNING},t.debug=!1,t}();var ot=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const it=function(t){function e(){for(var e,n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];var o=t.call(this)||this;return o.shuffle=!1,1===n.length?(o.shuffle=!1,o.children=n[0]):(o.shuffle=null!==(e=n[0].shuffle)&&void 0!==e&&e,o.children=n[1]),o.children.forEach((function(t){return t.incrementLevel()})),o}return ot(e,t),e.prototype.reset=function(){t.prototype.reset.call(this),this.children.forEach((function(t){t.reset()}))},e.prototype.incrementLevel=function(){t.prototype.incrementLevel.call(this),this.children.forEach((function(t){return t.incrementLevel()}))},e.prototype.shuffleIfNecessary=function(){this.shuffle&&function(t){for(var e=0;e<t.length;e++){var n=e+i(c()*(t.length-e)),r=t[e];t[e]=t[n],t[n]=r}}(this.children)},e}(rt);var at=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),ct=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return at(e,t),e.prototype.process=function(t,e){this.shuffleIfNecessary();for(var n=0;n<this.children.length;n++){var r=this.children[n];if(r.run(t,e),r.failed&&this.fail(),r.running||this.failed)return}this.succeed()},e}(it);const lt=ct;var ut=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),st=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ut(e,t),e.prototype.process=function(t,e){this.shuffleIfNecessary();for(var n=0;n<this.children.length;n++){var r=this.children[n];if(r.run(t,e),r.succeeded&&this.succeed(),r.running||this.succeeded)return}this.fail()},e}(it);const pt=st;var ft=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ht=function(t){function e(e){var n=t.call(this)||this;return n.child=e,n.child.incrementLevel(),n}return ft(e,t),e.prototype.reset=function(){t.prototype.reset.call(this),this.child.reset()},e.prototype.incrementLevel=function(){t.prototype.incrementLevel.call(this),this.child.incrementLevel()},e.prototype.process=function(t,e){this.child.run(t,e),this.status=this.child.status},e}(rt);var dt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const yt=function(t){function e(e){var n=t.call(this)||this;return n.lambda=e,n}return dt(e,t),e.prototype.process=function(t,e){var n=this.lambda(t,e);this.status=!0===n?nt.SUCCESS:!1===n?nt.FAILURE:nt.RUNNING},e}(rt);var _t=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const vt=function(t){function e(){return t.call(this,(function(){return null}))||this}return _t(e,t),e}(yt);var wt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Tt=function(t){function e(e){return t.call(this,null!=e?e:new vt)||this}return wt(e,t),e.prototype.process=function(t,e){this.child.run(t,e),this.fail()},e}(ht);var gt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const bt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return gt(e,t),e.prototype.process=function(t,e){this.reset(),this.child.run(t,e),this.succeed()},e}(ht);var Ot=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const It=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ot(e,t),e}(rt);var mt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const At=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return mt(e,t),e.prototype.process=function(t,e){t.hasPath?(t.followPath(),t.hasPath||this.succeed()):this.succeed()},e}(It);function Rt(t,e,n,r,o){if(r.isAt(e,n))return r.clearPath(),void t.succeed();var i=r.destination;if(i){if(i.x===e&&i.y===n)return void t.succeed();if(!r.isWithinEyesight(e,n))return void t.succeed();r.clearPath()}if(r.isOneStepAwayFrom(e,n)){var a=new M(e,n,r.distanceTo(e,n),0,null);return r.data.path.push(a),void t.succeed()}if(!r.isWithinEyesight(e,n)){for(var c=r.data,l=c.eyesight,u=c.path,s=0;!r.hasPath&&s<25;){s+=1;var p=v(r.x,r.y,l);o.data.map.populatePath(u,r.x,r.y,p[0],p[1],l)}return r.hasPath?void t.succeed():void t.fail()}o.data.map.populatePath(r.data.path,r.x,r.y,e,n,r.data.eyesight),r.hasPath?t.succeed():(r.data.unreachable.push(d(e,n)),t.fail())}var Pt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const St=function(t){function e(e){var n=t.call(this)||this;return n.itemType=e,n}return Pt(e,t),e.prototype.process=function(t,e){var n=e.data.items.findClosest(this.itemType,t.x,t.y,(function(e){return!t.isUnreachable(e.x,e.y)}));n?Rt(this,n.x,n.y,t,e):this.fail()},e}(It);function Nt(t,e,n,r,o){if(r.isNear(e,n))return r.clearPath(),void t.succeed();var c=r.destination;if(c){if(y(c.x,c.y,e,n)<=r.nearbyThreshold)return void t.succeed();if(!r.isWithinEyesight(e,n))return void t.succeed();r.clearPath()}for(var l=e-r.x,u=n-r.y,s=Math.sqrt(Math.pow(l,2)+Math.pow(u,2)),p=(s-r.nearbyThreshold)/s,f=r.x+(l<0?i(p*l):a(p*l)),h=r.y+(u<0?i(p*u):a(p*u)),_=0;!o.data.map.walkableAt(f,h);){if(_>25)return r.data.unreachable.push(d(e,n)),void t.fail();_+=1;var w=v(e,n,r.data.moveSpeed,r.nearbyThreshold);f=w[0],h=w[1]}if(!r.isWithinEyesight(f,h)){for(var T=r.data,g=T.eyesight,b=T.path,O=0;!r.hasPath&&O<25;){O+=1;var I=v(r.x,r.y,g);o.data.map.populatePath(b,r.x,r.y,I[0],I[1],g)}return r.hasPath?void t.succeed():void t.fail()}o.data.map.populatePath(r.data.path,r.x,r.y,f,h,r.data.eyesight),r.hasPath?t.succeed():(r.data.unreachable.push(d(e,n)),t.fail())}var Lt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Gt=function(t){function e(e){var n=t.call(this)||this;return n.itemType=e,n}return Lt(e,t),e.prototype.process=function(t,e){var n=e.data.items.findClosest(this.itemType,t.x,t.y,(function(e){return!t.isUnreachable(e.x,e.y)}));n?Nt(this,n.x,n.y,t,e):this.fail()},e}(It);var Ft=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Et=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ft(e,t),e.prototype.process=function(t,e){t.data.hydration>0?this.succeed():this.fail()},e}(It);var Ct=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const jt=function(t){function e(e){var n=t.call(this)||this;return n.itemType=e,n}return Ct(e,t),e.prototype.process=function(t,e){var n=e.data.items.findOfType(this.itemType,(function(e){return!e.used&&!e.held&&e.x===t.x&&e.y===t.y}));n?(t.pickUp(n),this.succeed()):this.fail()},e}(It);var Wt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Kt=function(t){function e(e){var n=t.call(this)||this;return n.itemType=e,n}return Wt(e,t),e.prototype.process=function(t,e){var n=t.unusedFromInventory(this.itemType);n&&!n.used?(n.use(t,e),this.succeed()):this.fail()},e}(rt);var Mt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const xt=function(t){function n(){return t.call(this,new pt([new Et,new Kt(e.BOTTLE),new lt([new jt(e.BOTTLE),new Kt(e.BOTTLE)])]))||this}return Mt(n,t),n}(ht);var Bt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ht=function(t){function e(e){var n=t.call(this)||this;return n.itemType=e,n}return Bt(e,t),e.prototype.process=function(t,e){var n=e.data.items.findClosest(this.itemType,t.x,t.y);n?(t.face(n.x,n.y),this.succeed()):this.fail()},e}(It);var kt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Dt=function(t){function n(){return t.call(this,new Ht(e.FIRE))||this}return kt(n,t),n}(ht);var Ut=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Xt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ut(e,t),e.prototype.process=function(t,e){e.isDay?this.succeed():this.fail()},e}(It);var zt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Yt=function(t){function e(e){var n=t.call(this)||this;return n.itemType=e,n}return zt(e,t),e.prototype.process=function(t,e){var n=e.data.items.findClosest(this.itemType,t.x,t.y);n&&t.isNear(n.x,n.y)?this.succeed():this.fail()},e}(It);var Vt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const qt=function(t){function n(){return t.call(this,new Yt(e.FIRE))||this}return Vt(n,t),n}(ht);var Jt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Qt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Jt(e,t),e.prototype.process=function(t,e){t.percentWarm>.5?this.succeed():this.fail()},e}(It);var Zt=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const $t=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Zt(e,t),e.prototype.process=function(t){t.clearPath(),t.data.sitting=!0,this.succeed()},e}(It);var te=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ee=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return te(n,t),n.prototype.process=function(t,n){var r=n.findClosestFellowMudman(t),o=n.data.items.findClosest(e.FIRE,t.x,t.y);(r||o)&&(r&&t.isCrowding(r.local.x,r.local.y)||o&&t.isCrowding(o.x,o.y))?this.fail():this.succeed()},n}(It);var ne=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const re=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ne(e,t),e.prototype.process=function(t,e){t.hasPath?this.succeed():this.fail()},e}(It);var oe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ie=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return oe(e,t),e.prototype.process=function(t,e){for(var n=v(t.x,t.y,t.crowdingThreshold,2*t.crowdingThreshold),r=0;!t.hasPath;){if(r>25)return void this.fail();Rt(this,n[0],n[1],t,e),r+=1}this.succeed()},e}(It);var ae=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ce=function(t){function e(){return t.call(this,new pt([new re,new ee,new ie]))||this}return ae(e,t),e}(ht);var le=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ue=function(t){function e(){return t.call(this,new pt([new Qt,new Xt,new lt([new qt,new ce,new Dt,new $t])]))||this}return le(e,t),e}(ht);var se=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const pe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return se(e,t),e.prototype.process=function(t,e){var n=t.data.targetedItem;n?Rt(this,n.x,n.y,t,e):this.fail()},e}(It);var fe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const he=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return fe(e,t),e.prototype.process=function(t,e){this.child.run(t,e),this.child.failed?this.succeed():this.child.succeeded&&this.fail()},e}(ht);var de=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ye=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return de(e,t),e.prototype.process=function(t,e){t.data.targetedItem?this.succeed():this.fail()},e}(It);var _e=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ve=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return _e(e,t),e.prototype.process=function(t,e){var n=t.data.targetedItem;n&&t.isAt(n.x,n.y)&&!n.held?(t.pickUp(n),this.succeed()):this.fail()},e}(It);var we=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Te=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return we(e,t),e.prototype.process=function(t,e){var n=t.data.targetedItem;n&&(t.isHoldingItem(n)||!n.collectible&&t.isNear(n.x,n.y))?(n.used||n.use(t,e),t.data.targetedItem=null,this.succeed()):this.fail()},e}(It);var ge=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const be=function(t){function e(){return t.call(this,new pt([new he(new ye),new Te,new lt([new ve,new Te])]))||this}return ge(e,t),e}(ht);var Oe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ie=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Oe(e,t),e.prototype.process=function(t,e){t.data.talkingTo?this.succeed():this.fail()},e}(It);var me=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ae=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return me(e,t),e.prototype.process=function(t,e){var n=e.findClosestFellowMudman(t);n&&t.isNear(n.local.x,n.local.y)?(t.talkTo(n),this.succeed()):this.fail()},e}(It);var Re=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Pe=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Re(e,t),e.prototype.process=function(t,e){var n=e.findClosestFellowMudman(t);n?(t.isNear(n.local.x,n.local.y)||(t.data.movingTarget=n.local),this.succeed()):this.fail()},e}(It);var Se=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ne=function(t){function e(){return t.call(this,new pt([new Ie,new Ae,new Pe]))||this}return Se(e,t),e}(ht);var Le=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Ge=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Le(e,t),e.prototype.process=function(t,e){this.shuffleIfNecessary();for(var n=0;n<this.children.length;n++){var r=this.children[n];if(r.run(t,e),r.running)return}this.succeed()},e}(it);const Fe=Ge;var Ee=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ce=function(t){function e(e){var n=t.call(this)||this;return n.amount=e,n}return Ee(e,t),e.prototype.process=function(t,e){t.dehydrate(this.amount),this.succeed()},e}(It);var je=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const We=function(t){function e(e){var n=t.call(this)||this;return n.amount=e,n}return je(e,t),e.prototype.process=function(t,e){t.toast(this.amount),this.succeed()},e}(It);var Ke=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Me=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ke(e,t),e.prototype.process=function(t,e){e.isNight?this.succeed():this.fail()},e}(It);var xe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Be=function(t){function e(e){var n=t.call(this)||this;return n.amount=e,n}return xe(e,t),e.prototype.process=function(t,e){t.chill(this.amount),this.succeed()},e}(It);var He=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ke=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return He(e,t),e.prototype.process=function(t,e){var n=t.data.talkingTo;n&&!t.isNear(n.local.x,n.local.y)?this.succeed():this.fail()},e}(It);var De=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ue=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return De(e,t),e.prototype.process=function(t,e){t.data.talkingTo=null},e}(It);var Xe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const ze=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Xe(e,t),e.prototype.process=function(t,e){var n=t.data.movingTarget;if(n){if(!t.isWithinEyesight(n.x,n.y))return t.data.movingTarget=null,void this.succeed();if(t.isNear(n.x,n.y))return t.data.movingTarget=null,void this.succeed();var r=t.destination;r&&y(r.x,r.y,n.x,n.y)<t.nearbyThreshold?this.succeed():(t.clearPath(),Nt(this,n.x,n.y,t,e))}else this.succeed()},e}(It);var Ye=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ve=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Ye(e,t),e.prototype.process=function(t,e){t.data.movingTarget=null,this.succeed()},e}(It);var qe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Je=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return qe(e,t),e.prototype.process=function(t,e){t.data.sitting=!1,this.succeed()},e}(It);var Qe=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const Ze=function(t){function e(e){var n=t.call(this)||this;return n.amount=e,n}return Qe(e,t),e.prototype.process=function(t,e){t.feelSocial(this.amount),this.succeed()},e}(It);var $e=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const tn=function(t){function e(e){var n=t.call(this)||this;return n.amount=e,n}return $e(e,t),e.prototype.process=function(t,e){t.feelLonely(this.amount),this.succeed()},e}(It);var en=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const nn=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return en(e,t),e.prototype.process=function(t,e){t.percentSocial<.25?this.succeed():this.fail()},e}(It);var rn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const on=function(t){function e(){return t.call(this,new he(new nn))||this}return rn(e,t),e}(ht);var an=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();const cn=function(t){function n(){return t.call(this,new bt(new lt([new bt(new Fe([new Ce(.1),new lt([new Xt,new We(.1)]),new pt([new lt([new qt,new We(.5)]),new lt([new Me,new Be(.5)])]),new lt([new Ie,new pt([new lt([new ke,new Ue])])]),new pt([new lt([new Ie,new Ze(1)]),new tn(.1)]),new ze,new ce])),new At,new pt([new lt([new pt([new be,new Tt(new pe)]),new pt([new xt,new Tt(new St(e.BOTTLE))]),new pt([new ue,new Tt(new Gt(e.FIRE))])]),new Tt(new Fe([new Ve,new Ue,new Je,new Tt]))]),new pt([new on,new Ne])])))||this}return an(n,t),n}(ht);var ln=0;const un=function(){function t(t,e,n,r){this.id=ln+=1;var o=new cn,i=tt.defaults;(t||0===t)&&(i.currentX=t),(e||0===e)&&(i.currentY=e),(n||0===n)&&(i.eyesight=n),r&&(i.size=r),this.local=new tt(i),this.behaviorTree=new Z(o,this.local,Q)}return t.prototype.tick=function(){this.behaviorTree.tick()},t}(),sn=function(){function t(t,e,n,r){void 0===r&&(r=24),this.lastFrameAt=0,this.canvas=t;var o=this.canvas.getContext("2d");if(!o)throw new Error("CanvasRenderingContext2D not supported");this.setCanvasSize(e,n),this.ctx=o,this.fps=r}return Object.defineProperty(t.prototype,"msPerFrame",{get:function(){return 1e3/this.fps},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nextFrameAt",{get:function(){return this.lastFrameAt+this.msPerFrame},enumerable:!1,configurable:!0}),t.prototype.setCanvasSize=function(t,e){this.canvas.width=t,this.canvas.height=e,this.canvas.style.width=t+"px",this.canvas.style.height=e+"px"},t.prototype.drawLoop=function(t){var e=this,n=function(r){requestAnimationFrame(n),r<e.nextFrameAt||(e.lastFrameAt=r,t(e.ctx,r))};requestAnimationFrame(n)},t.prototype.drawOnce=function(t){var e=this;requestAnimationFrame((function(n){t(e.ctx,n)}))},t}();var pn,fn="rgb(165, 42, 42)",hn="rgb(120, 50, 0)",dn="rgb(244, 164, 96)",yn="rgb(47, 79, 79)",_n="rgb(0, 100, 200)",vn="rgb(0, 0, 0)",wn="rgb(200, 50, 0)",Tn="rgb(0, 100, 0)",gn="rgb(255, 255, 255)",bn="rgba(255, 255, 255, 0.5)";function On(t,e){return e===pn.NONE?t===pn.NONE:(t&e)===e}!function(t){t[t.NONE=0]="NONE",t[t.TOP_LEFT=128]="TOP_LEFT",t[t.TOP=64]="TOP",t[t.TOP_RIGHT=32]="TOP_RIGHT",t[t.RIGHT=16]="RIGHT",t[t.BOTTOM_RIGHT=8]="BOTTOM_RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.BOTTOM_LEFT=2]="BOTTOM_LEFT",t[t.LEFT=1]="LEFT"}(pn||(pn={}));const In=function(){function t(t,e,n){void 0===n&&(n=24),this.defaultSpriteWidth=t,this.defaultSpriteHeight=e,this.fps=n,this.spriteRenderers=[],this.defaultSpriteWidth=i(t),this.defaultSpriteHeight=i(e)}return t.prototype.addSprite=function(t,e,n,r,o){var a,c,l;"function"==typeof n?(a=this.defaultSpriteWidth,c=this.defaultSpriteHeight,l=n):"function"==typeof r?(a=i(n),c=a,l=r):(a=i(n),c=i(r),l=o);var u=new sn(document.createElement("canvas"),a+2*e,c+2*e,this.fps);this.spriteRenderers[t]=u,u.drawOnce((function(t){l(t,a,c,i(a/2),i(c/2),0+e,a-e,c-e,0+e)}))},t.prototype.mirrorSprite=function(t,e){var n=this.spriteRenderers[t],r=n.canvas,o=r.width,i=r.height,a=new sn(document.createElement("canvas"),o,i,n.fps);this.spriteRenderers[e]=a,a.drawOnce((function(t){t.save(),t.scale(-1,1),t.drawImage(n.canvas,0,0,-1*o,i),t.restore()}))},t.prototype.drawSprite=function(t,e,n,r,o,a,c){void 0===o&&(o=0),void 0===a&&(a=0),void 0===c&&(c=1);var l=this.spriteRenderers[t].canvas,u=l.width,s=l.height,p=i(n-.5*u+o),f=i(r-.5*s+a),h=i(u*c),d=i(s*c);e.drawImage(l,0,0,u,s,p,f,h,d)},t}();var mn;!function(t){t[t.STANDING_FRONT=0]="STANDING_FRONT",t[t.STANDING_BACK=1]="STANDING_BACK",t[t.STANDING_RIGHT_FRONT=2]="STANDING_RIGHT_FRONT",t[t.STANDING_RIGHT_BACK=3]="STANDING_RIGHT_BACK",t[t.STANDING_LEFT_FRONT=4]="STANDING_LEFT_FRONT",t[t.STANDING_LEFT_BACK=5]="STANDING_LEFT_BACK",t[t.SITTING_FRONT=6]="SITTING_FRONT",t[t.SITTING_BACK=7]="SITTING_BACK",t[t.SITTING_RIGHT_FRONT=8]="SITTING_RIGHT_FRONT",t[t.SITTING_RIGHT_BACK=9]="SITTING_RIGHT_BACK",t[t.SITTING_LEFT_FRONT=10]="SITTING_LEFT_FRONT",t[t.SITTING_LEFT_BACK=11]="SITTING_LEFT_BACK",t[t.WALKING_1_FRONT=12]="WALKING_1_FRONT",t[t.WALKING_2_FRONT=13]="WALKING_2_FRONT",t[t.WALKING_3_FRONT=14]="WALKING_3_FRONT",t[t.WALKING_4_FRONT=15]="WALKING_4_FRONT",t[t.WALKING_1_BACK=16]="WALKING_1_BACK",t[t.WALKING_2_BACK=17]="WALKING_2_BACK",t[t.WALKING_3_BACK=18]="WALKING_3_BACK",t[t.WALKING_4_BACK=19]="WALKING_4_BACK",t[t.WALKING_RIGHT_1_FRONT=20]="WALKING_RIGHT_1_FRONT",t[t.WALKING_RIGHT_2_FRONT=21]="WALKING_RIGHT_2_FRONT",t[t.WALKING_RIGHT_3_FRONT=22]="WALKING_RIGHT_3_FRONT",t[t.WALKING_RIGHT_4_FRONT=23]="WALKING_RIGHT_4_FRONT",t[t.WALKING_RIGHT_1_BACK=24]="WALKING_RIGHT_1_BACK",t[t.WALKING_RIGHT_2_BACK=25]="WALKING_RIGHT_2_BACK",t[t.WALKING_RIGHT_3_BACK=26]="WALKING_RIGHT_3_BACK",t[t.WALKING_RIGHT_4_BACK=27]="WALKING_RIGHT_4_BACK",t[t.WALKING_LEFT_1_FRONT=28]="WALKING_LEFT_1_FRONT",t[t.WALKING_LEFT_2_FRONT=29]="WALKING_LEFT_2_FRONT",t[t.WALKING_LEFT_3_FRONT=30]="WALKING_LEFT_3_FRONT",t[t.WALKING_LEFT_4_FRONT=31]="WALKING_LEFT_4_FRONT",t[t.WALKING_LEFT_1_BACK=32]="WALKING_LEFT_1_BACK",t[t.WALKING_LEFT_2_BACK=33]="WALKING_LEFT_2_BACK",t[t.WALKING_LEFT_3_BACK=34]="WALKING_LEFT_3_BACK",t[t.WALKING_LEFT_4_BACK=35]="WALKING_LEFT_4_BACK"}(mn||(mn={}));var An,Rn=[mn.WALKING_1_FRONT,mn.WALKING_2_FRONT,mn.WALKING_3_FRONT,mn.WALKING_4_FRONT],Pn=[mn.WALKING_1_BACK,mn.WALKING_2_BACK,mn.WALKING_3_BACK,mn.WALKING_4_BACK],Sn=[mn.WALKING_RIGHT_1_FRONT,mn.WALKING_RIGHT_2_FRONT,mn.WALKING_RIGHT_3_FRONT,mn.WALKING_RIGHT_4_FRONT],Nn=[mn.WALKING_RIGHT_1_BACK,mn.WALKING_RIGHT_2_BACK,mn.WALKING_RIGHT_3_BACK,mn.WALKING_RIGHT_4_BACK],Ln=[mn.WALKING_LEFT_1_FRONT,mn.WALKING_LEFT_2_FRONT,mn.WALKING_LEFT_3_FRONT,mn.WALKING_LEFT_4_FRONT],Gn=[mn.WALKING_LEFT_1_BACK,mn.WALKING_LEFT_2_BACK,mn.WALKING_LEFT_3_BACK,mn.WALKING_LEFT_4_BACK];!function(t){t[t.BLANK=0]="BLANK",t[t.TALKING_1=1]="TALKING_1",t[t.TALKING_2=2]="TALKING_2",t[t.TALKING_3=3]="TALKING_3",t[t.TALKING_4=4]="TALKING_4",t[t.TALKING_5=5]="TALKING_5",t[t.TALKING_6=6]="TALKING_6",t[t.TALKING_7=7]="TALKING_7",t[t.TALKING_8=8]="TALKING_8",t[t.TALKING_9=9]="TALKING_9",t[t.TALKING_10=10]="TALKING_10",t[t.TALKING_11=11]="TALKING_11",t[t.TALKING_12=12]="TALKING_12"}(An||(An={}));var Fn=[An.TALKING_1,An.TALKING_2,An.TALKING_3,An.TALKING_4,An.TALKING_5,An.TALKING_6,An.TALKING_7,An.TALKING_8,An.TALKING_9,An.TALKING_10,An.TALKING_11,An.TALKING_12],En=function(){function t(t,e){void 0===t&&(t=20),void 0===e&&(e=24),this.mudmanSize=t,this.mudmanSize=i(t),this.spriteRenderer=new In(this.canvasWidth,this.canvasHeight,e),this.convoRenderer=new In(i(this.canvasWidth/2),i(this.canvasHeight/3),e),this.addStandingSprites(),this.addSittingSprites(),this.addWalkingSprites(),this.addConvoSprites()}return Object.defineProperty(t.prototype,"canvasWidth",{get:function(){return 2*this.mudmanSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"canvasHeight",{get:function(){return 3*this.mudmanSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyCenterX",{get:function(){return i(this.canvasWidth/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyCenterY",{get:function(){return i(this.canvasHeight/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyTopY",{get:function(){return i(this.bodyCenterY-this.bodyHeight/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyBottomY",{get:function(){return this.bodyTopY+this.bodyHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyLeftX",{get:function(){return i(this.bodyCenterX-this.bodyWidth/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyRightX",{get:function(){return this.bodyLeftX+this.bodyWidth},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyWidth",{get:function(){return this.mudmanSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyHeight",{get:function(){return i(this.mudmanSize/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttRadius",{get:function(){return i(this.mudmanSize/4)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttBottomY",{get:function(){return this.bodyBottomY+this.buttRadius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttLeftInnerX",{get:function(){return this.bodyLeftX+this.buttRadius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttRightInnerX",{get:function(){return this.bodyRightX-this.buttRadius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"legWidth",{get:function(){return i(this.mudmanSize/4)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"legHeight",{get:function(){return i(this.mudmanSize/2)},enumerable:!1,configurable:!0}),t.prototype.drawUpperBody=function(t,e){var n=this,r=n.bodyWidth,o=n.bodyCenterX,a=n.bodyTopY,c=n.bodyBottomY,l=n.bodyLeftX,u=n.bodyRightX,s=n.buttRadius,p=n.buttBottomY,f=n.buttLeftInnerX,h=n.buttRightInnerX;t.fillStyle=fn,t.beginPath(),t.arc(o,a,i(r/2),0,Math.PI,!0),t.lineTo(l,c),t.arcTo(l,p,f,p,s),t.lineTo(f,p),e?t.lineTo(u,p):(t.lineTo(h,p),t.arcTo(u,p,u,c,s),t.lineTo(u,c)),t.lineTo(u,a),t.closePath(),t.fill()},t.prototype.drawFace=function(t){var e=this,n=e.bodyWidth,r=e.bodyTopY,o=e.bodyRightX,a=i(.33*n),c=i(.3*a),l=o-a-i((n-a)/6),u=r,s=l-a+2*c,p=l+a-i(1.5*c);if(t.fillStyle=dn,t.beginPath(),t.arc(l,u,a,0,2*Math.PI),t.fill(),t.fillStyle=fn,t.beginPath(),t.arc(l,u,a+1,-.2*Math.PI,-.8*Math.PI,!0),t.closePath(),t.fill(),t.fillStyle=yn,t.beginPath(),t.arc(s,u,c,0,2*Math.PI),t.fill(),t.beginPath(),t.arc(p,u,c,0,2*Math.PI),t.fill(),n>24){var f=p-s+2*c,h=c,d=s-c,y=u-i(.75*c)-h,_=p-s-3*c,v=c,w=l-i(.5*_),T=u+i(1.5*c);t.fillStyle=fn,t.fillRect(d,y,f,h),t.fillStyle=wn,t.fillRect(w,T,_,v)}},t.prototype.drawSimpleFace=function(t,e){var n,r=this,o=r.bodyWidth,a=r.bodyTopY,c=r.bodyRightX,l=r.bodyCenterX,u=i(.33*o),s=i(.3*u),p=a,f=(n=e?c-u:l)+u,h=n-u+i(u/2),d=f-i(u/2);t.fillStyle=yn,t.beginPath(),t.arc(h,p,s,0,2*Math.PI),t.fill(),t.beginPath(),t.arc(d,p,s,0,2*Math.PI),t.fill()},t.prototype.drawStanding=function(t,e){this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1);var n=this,r=n.buttLeftInnerX,o=n.buttRightInnerX,a=n.buttRadius,c=n.bodyBottomY,l=n.legWidth,u=n.legHeight;t.fillStyle=fn,t.fillRect(r-i(l/2),c,l,u+a),t.fillRect(o-i(l/2),c,l,u+a)},t.prototype.drawStandingRight=function(t,e){this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0);var n=this,r=n.bodyRightX,o=n.buttLeftInnerX,i=n.buttBottomY,a=n.legWidth,c=n.legHeight;t.fillStyle=fn,t.fillRect(o,i,a,c),t.fillRect(r-a,i,a,c)},t.prototype.drawSitting=function(t,e){var n=this,r=n.buttLeftInnerX,o=n.buttRightInnerX,a=n.buttBottomY,c=n.legWidth,l=n.legHeight;if(t.save(),t.translate(0,l),this.drawUpperBody(t,!1),e){this.drawSimpleFace(t,!1),t.fillStyle=fn;var u=r-i(c/2),s=r,p=o-i(c/2),f=o,h=a-i(.75*l),d=h+l,y=i(c/2);t.fillRect(u,h,c,l),t.beginPath(),t.arc(s,d,y,0,Math.PI),t.fill(),t.fillStyle=hn,t.beginPath(),t.arc(s,d,y,0,2*Math.PI),t.fill(),t.fillStyle=fn,t.fillRect(p,h,c,l),t.beginPath(),t.arc(f,d,y,0,Math.PI),t.fill(),t.fillStyle=hn,t.beginPath(),t.arc(f,d,y,0,2*Math.PI),t.fill(),t.restore()}},t.prototype.drawSittingRight=function(t,e){var n=this,r=n.bodyCenterX,o=n.bodyRightX,a=n.buttBottomY,c=n.legWidth,l=n.legHeight;t.save(),t.translate(0,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0),t.fillStyle=fn;var u=i(c/2),s=o-i(l/2),p=a-c,f=a,h=s+l;if(t.fillRect(s,a-c,l,c),t.beginPath(),t.arc(h,p,u,Math.PI,0),t.lineTo(h+u,f-u),t.arc(h,f-u,u,0,.5*Math.PI),t.fill(),!e)return t.fillStyle=hn,t.beginPath(),t.arc(o,p-u,u,.5*Math.PI,0,!0),t.lineTo(o+u,p-c),t.arc(o,p-c,u,0,-.5*Math.PI,!0),void t.fill();var d=i(1.5*c),y=i(d/2),_=r-i(d/2),v=r,w=v+i(d/2),T=a-i(.75*l),g=T+l;t.fillRect(_,T,d,l),t.beginPath(),t.arc(v,g,y,0,Math.PI),t.fill(),t.fillStyle=hn,t.beginPath(),t.arc(w-u,g+y-u,u,Math.PI,0,!0),t.lineTo(w,g-i(.25*c)),t.arc(w-u,g-i(.25*c),u,0,Math.PI,!0),t.closePath(),t.fill()},t.prototype.drawWalking1=function(t,e){var n=this,r=n.buttLeftInnerX,o=n.buttRightInnerX,a=n.buttRadius,c=n.bodyBottomY,l=n.legWidth,u=n.legHeight;t.fillStyle=fn,t.fillRect(r-i(l/2),c,l,u+a),t.fillStyle=hn,t.fillRect(o-i(l/2),c-i(.75*u),l,u+a),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalking2=function(t,e){var n=this,r=n.buttLeftInnerX,o=n.buttRightInnerX,a=n.buttRadius,c=n.bodyBottomY,l=n.legWidth,u=n.legHeight;t.fillStyle=hn,t.fillRect(r-i(l/2),c-i(.5*u),l,u+a),t.fillStyle=fn,t.fillRect(o-i(l/2),c-i(.5*u),l,u+a),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalking3=function(t,e){var n=this,r=n.buttLeftInnerX,o=n.buttRightInnerX,a=n.buttRadius,c=n.bodyBottomY,l=n.legWidth,u=n.legHeight;t.fillStyle=hn,t.fillRect(r-i(l/2),c-i(.75*u),l,u+a),t.fillStyle=fn,t.fillRect(o-i(l/2),c,l,u+a),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalking4=function(t,e){var n=this,r=n.buttLeftInnerX,o=n.buttRightInnerX,a=n.buttRadius,c=n.bodyBottomY,l=n.legWidth,u=n.legHeight;t.fillStyle=fn,t.fillRect(r-i(l/2),c-i(.5*u),l,u+a),t.fillStyle=hn,t.fillRect(o-i(l/2),c-i(.5*u),l,u+a),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalkingRight1=function(t,e){var n=this,r=n.bodyRightX,o=n.buttLeftInnerX,a=n.buttBottomY,c=n.legWidth,l=n.legHeight;t.fillStyle=fn,t.fillRect(o,a-i(l/2),c,l),t.fillStyle=fn,t.fillRect(r-c,a,c,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.drawWalkingRight2=function(t,e){var n=this,r=n.buttLeftInnerX,o=n.bodyCenterX,a=n.buttBottomY,c=n.legWidth,l=n.legHeight;t.fillStyle=hn,t.fillRect(r+i(c/2),a-i(.75*l),c,l),t.fillStyle=fn,t.fillRect(o+i(.25*c),a,c,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.drawWalkingRight3=function(t,e){var n=this,r=n.buttLeftInnerX,o=n.bodyCenterX,a=n.buttBottomY,c=n.legWidth,l=n.legHeight;t.fillStyle=hn,t.fillRect(o+i(.25*c),a-i(.75*l),c,l),t.fillStyle=fn,t.fillRect(r+i(c/2),a,c,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.drawWalkingRight4=function(t,e){var n=this,r=n.bodyRightX,o=n.buttLeftInnerX,a=n.buttBottomY,c=n.legWidth,l=n.legHeight;t.fillStyle=fn,t.fillRect(o,a,c,l),t.fillStyle=fn,t.fillRect(r-c,a-i(l/2),c,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.addStandingSprites=function(){var t=this;this.spriteRenderer.addSprite(mn.STANDING_BACK,0,(function(e){t.drawStanding(e,!1)})),this.spriteRenderer.addSprite(mn.STANDING_FRONT,0,(function(e){t.drawStanding(e,!0)})),this.spriteRenderer.addSprite(mn.STANDING_RIGHT_BACK,0,(function(e){t.drawStandingRight(e,!1)})),this.spriteRenderer.addSprite(mn.STANDING_RIGHT_FRONT,0,(function(e){t.drawStandingRight(e,!0)})),this.spriteRenderer.mirrorSprite(mn.STANDING_RIGHT_BACK,mn.STANDING_LEFT_BACK),this.spriteRenderer.mirrorSprite(mn.STANDING_RIGHT_FRONT,mn.STANDING_LEFT_FRONT)},t.prototype.addSittingSprites=function(){var t=this;this.spriteRenderer.addSprite(mn.SITTING_BACK,0,(function(e){t.drawSitting(e,!1)})),this.spriteRenderer.addSprite(mn.SITTING_FRONT,0,(function(e){t.drawSitting(e,!0)})),this.spriteRenderer.addSprite(mn.SITTING_RIGHT_BACK,0,(function(e){t.drawSittingRight(e,!1)})),this.spriteRenderer.addSprite(mn.SITTING_RIGHT_FRONT,0,(function(e){t.drawSittingRight(e,!0)})),this.spriteRenderer.mirrorSprite(mn.SITTING_RIGHT_BACK,mn.SITTING_LEFT_BACK),this.spriteRenderer.mirrorSprite(mn.SITTING_RIGHT_FRONT,mn.SITTING_LEFT_FRONT)},t.prototype.addWalkingSprites=function(){var t=this;this.spriteRenderer.addSprite(mn.WALKING_1_BACK,0,(function(e){t.drawWalking1(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_2_BACK,0,(function(e){t.drawWalking2(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_3_BACK,0,(function(e){t.drawWalking3(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_4_BACK,0,(function(e){t.drawWalking4(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_1_FRONT,0,(function(e){t.drawWalking1(e,!0)})),this.spriteRenderer.addSprite(mn.WALKING_2_FRONT,0,(function(e){t.drawWalking2(e,!0)})),this.spriteRenderer.addSprite(mn.WALKING_3_FRONT,0,(function(e){t.drawWalking3(e,!0)})),this.spriteRenderer.addSprite(mn.WALKING_4_FRONT,0,(function(e){t.drawWalking4(e,!0)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_1_BACK,0,(function(e){t.drawWalkingRight1(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_2_BACK,0,(function(e){t.drawWalkingRight2(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_3_BACK,0,(function(e){t.drawWalkingRight3(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_4_BACK,0,(function(e){t.drawWalkingRight4(e,!1)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_1_FRONT,0,(function(e){t.drawWalkingRight1(e,!0)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_2_FRONT,0,(function(e){t.drawWalkingRight2(e,!0)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_3_FRONT,0,(function(e){t.drawWalkingRight3(e,!0)})),this.spriteRenderer.addSprite(mn.WALKING_RIGHT_4_FRONT,0,(function(e){t.drawWalkingRight4(e,!0)})),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_1_BACK,mn.WALKING_LEFT_1_BACK),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_2_BACK,mn.WALKING_LEFT_2_BACK),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_3_BACK,mn.WALKING_LEFT_3_BACK),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_4_BACK,mn.WALKING_LEFT_4_BACK),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_1_FRONT,mn.WALKING_LEFT_1_FRONT),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_2_FRONT,mn.WALKING_LEFT_2_FRONT),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_3_FRONT,mn.WALKING_LEFT_3_FRONT),this.spriteRenderer.mirrorSprite(mn.WALKING_RIGHT_4_FRONT,mn.WALKING_LEFT_4_FRONT)},t.prototype.addConvoSprites=function(){var t=this,e=function(t,e,n,r,o,a,c,l,u){var s=i(e/6),p=l,f=u+s,h=p-2*s;t.fillStyle=gn,t.strokeStyle="rgb(90, 90, 90)",t.lineWidth=1,t.beginPath(),t.moveTo(f,h),t.arc(u+s,h-s,s,.5*Math.PI,Math.PI),t.lineTo(u,a+s),t.arc(u+s,a+s,s,Math.PI,-.5*Math.PI),t.lineTo(c-s,a),t.arc(c-s,a+s,s,-.5*Math.PI,0),t.lineTo(c,h-s),t.arc(c-s,h-s,s,0,.5*Math.PI),t.lineTo(f,p),t.arc(f,p-s,s,.5*Math.PI,-.5*Math.PI,!0),t.closePath(),t.fill(),t.stroke()};this.convoRenderer.addSprite(An.BLANK,1,(function(t,n,r,o,i,a,c,l,u){e(t,n,0,0,0,a,c,l,u)})),Fn.forEach((function(n){t.convoRenderer.addSprite(n,1,(function(t,n,r,o,c,l,u,s,p){e(t,n,0,0,0,l,u,s,p);for(var f=i(n/6),h=l+f,d=p+f,y=r-2*f-2*f-2,_=n-2*f-2,v=i(3*Math.random())+1,w=a(y/8),T=0;T<v;T++){var g=i(y/v),b=h+T*g+i(g/2)-i(w/2);t.fillStyle=vn,t.fillRect(d,b,_,w);for(var O=i(3*Math.random()),I=0;I<O;I++){var m=d+Math.max(2,i(Math.random()*(_-2)));t.fillStyle=gn,t.fillRect(m,b,2,w)}}}))}))},t.prototype.mirrorRenderer=function(t){var e=this.canvasWidth,n=this.canvasHeight,r=new sn(document.createElement("canvas"),e,n,t.fps);return r.drawOnce((function(r){r.save(),r.scale(-1,1),r.drawImage(t.canvas,0,0,-1*e,n),r.restore()})),r},t.prototype.drawMudman=function(t,e,n,r,o){var a,c=e.local.data,l=c.xDirection,u=c.yDirection;if(e.local.hasPath){var s=i(o%200*4/200);a=(0===l?u<0?Pn:Rn:l<0?u<0?Gn:Ln:u<0?Nn:Sn)[s]}else a=e.local.data.sitting?0===l?u<0?mn.SITTING_BACK:mn.SITTING_FRONT:l<0?u<0?mn.SITTING_LEFT_BACK:mn.SITTING_LEFT_FRONT:u<0?mn.SITTING_RIGHT_BACK:mn.SITTING_RIGHT_FRONT:0===l?u<0?mn.STANDING_BACK:mn.STANDING_FRONT:l<0?u<0?mn.STANDING_LEFT_BACK:mn.STANDING_LEFT_FRONT:u<0?mn.STANDING_RIGHT_BACK:mn.STANDING_RIGHT_FRONT;this.spriteRenderer.drawSprite(a,t,n,r,0,-.25*this.mudmanSize)},t.prototype.drawConvo=function(t,e,n,r,o){var a=e.local.data.talkingTo;if(a&&!a.local.hasPath){var c=i(Fn.length*(o%4e3)/4e3),l=Fn[(e.id+c)%Fn.length];this.convoRenderer.drawSprite(l,t,n,r,1*this.mudmanSize,-1*this.mudmanSize)}},t}();const Cn=En;var jn,Wn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t[t.EMPTY=0]="EMPTY",t[t.WATER_FULL=1]="WATER_FULL",t[t.WATER_PARTIAL=2]="WATER_PARTIAL"}(jn||(jn={}));const Kn=function(t){function e(n){var r=t.call(this,n/2.5,n/2)||this;return r.tileSize=n,r.addSprite(jn.EMPTY,1,(function(t,n,r,o,i,a,c,l,u){var s=e.createBottlePath(n,r,o,i,a,c,l,u);t.strokeStyle=gn,t.lineWidth=1,t.stroke(s)})),r.addSprite(jn.WATER_FULL,1,(function(t,n,r,o,a,c,l,u,s){var p=e.createBottlePath(n,r,o,a,c,l,u,s);t.save(),t.clip(p),t.fillStyle=_n,t.fillRect(s,c+i(r/4),n,r),t.restore(),t.strokeStyle=gn,t.lineWidth=1,t.stroke(p)})),r.addSprite(jn.WATER_PARTIAL,1,(function(t,n,r,o,a,c,l,u,s){var p=e.createBottlePath(n,r,o,a,c,l,u,s);t.save(),t.clip(p),t.fillStyle=_n,t.fillRect(s,u-i(r/4),n,r),t.restore(),t.strokeStyle=gn,t.lineWidth=1,t.stroke(p)})),r}return Wn(e,t),e.createBottlePath=function(t,e,n,r,o,a,c,l){var u=i(t/2),s=n-i(u/2),p=n+i(u/2),f=i(t/4),h=o+i(e/8),d=o+i(e/4),y=i((d-h)/2),_=new Path2D;return _.moveTo(s,o),_.lineTo(p,o),_.lineTo(p,h),_.arc(p,h+y,y,-.5*Math.PI,.5*Math.PI,!0),_.lineTo(a,d),_.lineTo(a,c-f),_.arc(a-f,c-f,f,0,.5*Math.PI),_.lineTo(l+f,c),_.arc(l+f,c-f,f,.5*Math.PI,Math.PI),_.lineTo(l,d),_.lineTo(l+i((t-u)/2),d),_.arc(s,h+y,y,.5*Math.PI,-.5*Math.PI,!0),_.lineTo(s,o),_.closePath(),_},e.prototype.drawBottle=function(t,e,n,r,o,i,a){var c=e.isEmpty?jn.EMPTY:e.percentFull<.67?jn.WATER_PARTIAL:jn.WATER_FULL;this.drawSprite(c,t,n,r,o,i,a)},e}(In);var Mn,xn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t[t.FLAME_1=0]="FLAME_1",t[t.FLAME_2=1]="FLAME_2",t[t.FLAME_3=2]="FLAME_3",t[t.FLAME_4=3]="FLAME_4",t[t.FLAME_5=4]="FLAME_5",t[t.FLAME_6=5]="FLAME_6",t[t.FLAME_7=6]="FLAME_7",t[t.FLAME_8=7]="FLAME_8"}(Mn||(Mn={}));var Bn=[Mn.FLAME_1,Mn.FLAME_2,Mn.FLAME_3,Mn.FLAME_4,Mn.FLAME_5,Mn.FLAME_6,Mn.FLAME_7,Mn.FLAME_8];const Hn=function(t){function e(n){var r=t.call(this,n,2*n)||this;return r.tileSize=n,Bn.forEach((function(t){r.addSprite(t,0,(function(t,n,r,o,a,l,u,s,p){var f=a-i(r/16);e.drawRandomFlameComponent(t,n,o,f,"red"),e.drawRandomFlameComponent(t,n,o,f,"yellow"),e.drawRandomFlameComponent(t,n,o,f,"orange"),e.drawRandomFlameComponent(t,n/2,o,f-i(.25*c()*r),"red"),e.drawRandomFlameComponent(t,n/2,o,f-i(.25*c()*r),"red")}))})),r}return xn(e,t),e.drawRandomFlameComponent=function(t,e,n,r,o){var a,l,u=i(.1*e+.25*c()*e),s=i(u/2),p=(c()-.5)*u,f=(a=c(),void 0===l&&(l=.5),(1-j(1-a,l)-.5)*u),h=c()*(2*Math.PI),d=i(n-s+p),y=i(r-s+f);t.translate(n,r),t.rotate(h),t.translate(-1*n,-1*r),t.fillStyle=o,t.globalAlpha=.25+.75*c(),t.fillRect(d,y,u,u),t.globalAlpha=1,t.setTransform(1,0,0,1,0,0)},e.prototype.drawAnimated=function(t,e,n,r,o,a,c){var l=Bn[i(Bn.length*(e%2e3/2e3))];this.drawSprite(l,t,n,r,o,a,c)},e}(In);var kn,Dn=function(){var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();!function(t){t[t.STUMP=0]="STUMP",t[t.BOUGHS_1=1]="BOUGHS_1",t[t.BOUGHS_2=2]="BOUGHS_2",t[t.BOUGHS_3=3]="BOUGHS_3",t[t.BOUGHS_4=4]="BOUGHS_4"}(kn||(kn={}));var Un=[kn.BOUGHS_1,kn.BOUGHS_2,kn.BOUGHS_3,kn.BOUGHS_4],Xn=function(t){function e(n){var r=t.call(this,4*n,4*n)||this;return r.tileSize=n,r.addSprite(kn.STUMP,1,n,n,(function(t,e,n,r,o,a,c,l,u){var s=i(e/4),p=l-s,f=p-i(n/3);t.fillStyle=hn,t.lineWidth=2,t.strokeStyle=hn,t.beginPath(),t.arc(r,p,s,0,Math.PI),t.lineTo(r-s,f),t.lineTo(r+s,f),t.lineTo(r+s,p),t.fill(),t.stroke(),t.fillStyle=dn,t.beginPath(),t.arc(r,f,s,0,2*Math.PI),t.fill(),t.stroke(),t.fillStyle="rgb(205, 133, 63)",t.beginPath(),t.arc(r,f,i(s/2),0,2*Math.PI),t.fill()})),Un.forEach((function(t){var n=r.tileSize;r.addSprite(t,1,(function(t,r,o,a,c,l,u,s,p){var f=c-i(n/8),h=i(n/3);e.drawRandomBoughComponent(t,a,f,h,h,1,1,Tn,0);for(var d=0;d<5;d++)e.drawRandomBoughComponent(t,a,f-h,i(n/2),i(n/1.5),.5,1,Tn,1);for(d=0;d<5;d++)e.drawRandomBoughComponent(t,a,f-h,i(n/16),i(n/2),.1,.5,"rgb(34, 139, 34)",3)}))})),r}return Dn(e,t),e.drawRandomBoughComponent=function(t,e,n,r,o,a,l,u,s){var p=i(r+c()*(o-r)),f=(o+r)/2,h=i((c()-.5)*f*s),d=i(-.5*c()*f*s),y=a+c()*(l-a);t.fillStyle=u,t.globalAlpha=y,t.beginPath(),t.arc(e+h,n+d,p,0,2*Math.PI),t.fill(),t.globalAlpha=1},e}(In);const zn=Xn;var Yn=function(){function t(t,e,n){var r=this;void 0===n&&(n=24),this.overlayFullMap=!1,this.heroIndex=0,this.world=e,this.worldRenderer=new sn(document.createElement("canvas"),e.data.map.width,e.data.map.height,n),this.spaceRenderer=new sn(document.createElement("canvas"),t.width,t.height,n),this.viewportRenderer=new sn(t,t.width,t.height,n),this.hudRenderer=new sn(document.createElement("canvas"),t.width,t.height,6),this.nightRenderer=new sn(document.createElement("canvas"),t.width,t.height,n),this.firelightRenderer=new sn(document.createElement("canvas"),this.firelightSize,this.firelightSize,12),this.flameRenderer=new Hn(this.tileSize),this.bottleRenderer=new Kn(this.tileSize),this.treeRenderer=new zn(this.tileSize);var o=i(this.tileSize/2);this.mudmanRenderer=new Cn(o,n);for(var a=function(t,e){if("number"!=typeof t||"number"!=typeof e){var n=r.world.data.map.randomWalkableCoords();t=n[0],e=n[1]}var i=new un(t,e,20*r.world.data.map.tileSize,o);r.world.data.mudmen.push(i)},c=0;c<1e3;c++)a()}return Object.defineProperty(t.prototype,"fps",{set:function(t){this.viewportRenderer.fps=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hero",{get:function(){return this.world.data.mudmen[this.heroIndex]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"worldWidth",{get:function(){return this.worldRenderer.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"worldHeight",{get:function(){return this.worldRenderer.canvas.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spaceWidth",{get:function(){return this.spaceRenderer.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spaceHeight",{get:function(){return this.spaceRenderer.canvas.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportWidth",{get:function(){return this.viewportRenderer.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportHeight",{get:function(){return this.viewportRenderer.canvas.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tileSize",{get:function(){return this.world.data.map.tileSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"firelightSize",{get:function(){return 4*this.tileSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nightCtx",{get:function(){return this.nightRenderer.ctx},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportOriginX",{get:function(){return this.hero.local.x-i(this.viewportWidth/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportOriginY",{get:function(){return this.hero.local.y-i(this.viewportHeight/2)},enumerable:!1,configurable:!0}),t.prototype.eachItemOfTypeInViewport=function(t,e,n,r,o,i,a,c){void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===c&&(c=0);var l=this,u=l.tileSize,s=l.viewportWidth,p=l.viewportHeight,f=e-u*c,h=s+u*(c+i),d=n-u*o,y=p+u*(o+a);this.world.data.items.forEachOfType(t,(function(t){t.used||t.held||_(t.x,t.y,f,d,h,y)&&r(t,t.x-e,t.y-n)}))},t.prototype.eachMudmanInViewport=function(t,e,n){var r=this.viewportWidth,o=this.viewportHeight;this.world.data.mudmen.forEach((function(i){_(i.local.x,i.local.y,t,e,r,o)&&n(i,i.local.x-t,i.local.y-e)}))},t.prototype.eachTileInViewport=function(t,e,n,r,o,i,a){void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0);for(var c=this.world.data.map,l=this.tileSize,u=Math.max(0,c.xToCol(t)-a),s=Math.min(c.colCount-1,c.xToCol(t+this.viewportWidth)+o),p=Math.max(0,c.yToRow(e)-r),f=Math.min(c.rowCount-1,c.yToRow(e+this.viewportHeight)+i),h=u;h<=s;h++)for(var d=p;d<=f;d++){var y=h*l,_=d*l;n(d,h,y,_,y-t,_-e,l)}},t.prototype.drawTile=function(t,e,n,r,o,a,c,l){var u=n*r,s=e*r,p=o/1.5,f=a,h=o/2.5;if(l)t.fillStyle="rgb(0, 100, 200)",t.fillRect(u,s,r,r),function(t,e,n,r,o,i,a,c,l,u){void 0===c&&(c=0),void 0===l&&(l=200),void 0===u&&(u=0);var s=function(t,e,n,r){var o,i,a=pn.NONE;return o=e-r,i=t-r,n.underwaterAt(i,o)||(a|=pn.TOP_LEFT),i=t,n.underwaterAt(i,o)||(a|=pn.TOP),i=t+r,n.underwaterAt(i,o)||(a|=pn.TOP_RIGHT),o=e,i=t-r,n.underwaterAt(i,o)||(a|=pn.LEFT),i=t+r,n.underwaterAt(i,o)||(a|=pn.RIGHT),o=e+r,i=t-r,n.underwaterAt(i,o)||(a|=pn.BOTTOM_LEFT),i=t,n.underwaterAt(i,o)||(a|=pn.BOTTOM),i=t+r,n.underwaterAt(i,o)||(a|=pn.BOTTOM_RIGHT),a}(n,r,e,a);if(!On(s,pn.NONE)){var p,f,h,d,y=a/2,_=o,v=_+a,w=i,T=i+a,g=_+y,b=i+y,O=a/4,I=w+O,m=w+(a-O),A=_+O,R=_+(a-O),P=On(s,pn.TOP),S=On(s,pn.RIGHT),N=On(s,pn.BOTTOM),L=On(s,pn.LEFT);if(t.fillStyle="rgb("+c+", "+l+", "+u+")",P){if(t.fillRect(_,w,a,O),N){if(t.fillRect(_,m,a,O),S||L){S&&t.fillRect(g,w,y,a),L&&t.fillRect(_,w,y,a);var G=t.fillStyle;t.fillStyle="rgb(0, 100, 200)",t.beginPath(),t.arc(g,b,O,0,2*Math.PI),t.fill(),t.fillStyle=G}return}if(S)return t.beginPath(),t.moveTo(g,w),t.lineTo(g,I),t.arcTo(R,I,R,T,O),t.lineTo(R,T),t.lineTo(v,T),t.lineTo(v,w),t.closePath(),t.fill(),L?(t.beginPath(),t.moveTo(g,w),t.lineTo(g,I),t.arcTo(A,I,A,T,O),t.lineTo(A,T),t.lineTo(_,T),t.lineTo(_,w),t.closePath(),void t.fill()):(null!=d||(d=On(s,pn.BOTTOM_LEFT)),void(d&&(t.beginPath(),t.arc(_,T,O,-.5*Math.PI,0),t.lineTo(_,T),t.closePath(),t.fill())));if(L)return t.beginPath(),t.moveTo(g,w),t.lineTo(g,I),t.arcTo(A,I,A,T,O),t.lineTo(A,T),t.lineTo(_,T),t.lineTo(_,w),t.closePath(),t.fill(),null!=h||(h=On(s,pn.BOTTOM_RIGHT)),void(h&&(t.beginPath(),t.arc(v,T,O,Math.PI,-.5*Math.PI),t.lineTo(v,T),t.closePath(),t.fill()));null!=d||(d=On(s,pn.BOTTOM_LEFT)),null!=h||(h=On(s,pn.BOTTOM_RIGHT)),d&&(t.beginPath(),t.arc(_,T,O,-.5*Math.PI,0),t.lineTo(_,T),t.closePath(),t.fill()),h&&(t.beginPath(),t.arc(v,T,O,Math.PI,-.5*Math.PI),t.lineTo(v,T),t.closePath(),t.fill())}else if(N){if(t.fillRect(_,m,a,O),L)return t.beginPath(),t.moveTo(g,T),t.lineTo(g,m),t.arcTo(A,m,A,w,O),t.lineTo(A,w),t.lineTo(_,w),t.lineTo(_,T),t.closePath(),t.fill(),S?(t.beginPath(),t.moveTo(g,T),t.lineTo(g,m),t.arcTo(R,m,R,w,O),t.lineTo(R,w),t.lineTo(v,w),t.lineTo(v,T),t.closePath(),void t.fill()):(null!=f||(f=On(s,pn.TOP_RIGHT)),void(f&&(t.beginPath(),t.arc(v,w,O,.5*Math.PI,Math.PI),t.lineTo(v,w),t.closePath(),t.fill())));if(S)return t.beginPath(),t.moveTo(g,T),t.lineTo(g,m),t.arcTo(R,m,R,w,O),t.lineTo(R,w),t.lineTo(v,w),t.lineTo(v,T),t.closePath(),t.fill(),null!=p||(p=On(s,pn.TOP_LEFT)),void(p&&(t.beginPath(),t.arc(_,w,O,0,.5*Math.PI),t.lineTo(_,w),t.closePath(),t.fill()));null!=p||(p=On(s,pn.TOP_LEFT)),null!=f||(f=On(s,pn.TOP_RIGHT)),p&&(t.beginPath(),t.arc(_,w,O,0,.5*Math.PI),t.lineTo(_,w),t.closePath(),t.fill()),f&&(t.beginPath(),t.arc(v,w,O,.5*Math.PI,Math.PI),t.lineTo(v,w),t.closePath(),t.fill())}else if(L){if(t.fillRect(_,w,O,a),S)return void t.fillRect(R,w,O,a);null!=f||(f=On(s,pn.TOP_RIGHT)),null!=h||(h=On(s,pn.BOTTOM_RIGHT)),f&&(t.beginPath(),t.arc(v,w,O,.5*Math.PI,Math.PI),t.lineTo(v,w),t.closePath(),t.fill()),h&&(t.beginPath(),t.arc(v,T,O,Math.PI,-.5*Math.PI),t.lineTo(v,T),t.closePath(),t.fill())}else S?(t.fillRect(R,w,O,a),null!=p||(p=On(s,pn.TOP_LEFT)),null!=d||(d=On(s,pn.BOTTOM_LEFT)),p&&(t.beginPath(),t.arc(_,w,O,0,.5*Math.PI),t.lineTo(_,w),t.closePath(),t.fill()),d&&(t.beginPath(),t.arc(_,T,O,-.5*Math.PI,0),t.lineTo(_,T),t.closePath(),t.fill())):(null!=p||(p=On(s,pn.TOP_LEFT)),null!=d||(d=On(s,pn.BOTTOM_LEFT)),null!=f||(f=On(s,pn.TOP_RIGHT)),null!=h||(h=On(s,pn.BOTTOM_RIGHT)),p&&(t.beginPath(),t.arc(_,w,O,0,.5*Math.PI),t.lineTo(_,w),t.closePath(),t.fill()),f&&(t.beginPath(),t.arc(v,w,O,.5*Math.PI,Math.PI),t.lineTo(v,w),t.closePath(),t.fill()),h&&(t.beginPath(),t.arc(v,T,O,Math.PI,-.5*Math.PI),t.lineTo(v,T),t.closePath(),t.fill()),d&&(t.beginPath(),t.arc(_,T,O,-.5*Math.PI,0),t.lineTo(_,T),t.closePath(),t.fill()))}}(t,this.world.data.map,u,s,u,s,r,p,f,h);else{var d=function(t){return 255*j(Math.max((t-195)/60,0),.75)}(o),y=i(Math.max(d,p)),_=i(Math.max(d,f)),v=i(Math.max(d,h));t.fillStyle="rgb("+y+", "+_+", "+v+")",t.fillRect(u,s,r,r)}t.strokeStyle="rgba(0, 0, 0, 0.05)",t.strokeRect(u,s,r,r)},t.prototype.drawWorld=function(){var t=this;this.worldRenderer.drawOnce((function(e,n){e.clearRect(0,0,t.worldWidth,t.worldHeight);var r=t.tileSize;t.world.data.map.eachTile((function(n,o,i,a,c,l){t.drawTile(e,n,o,r,i,a,c,l)}))}))},t.prototype.drawSpace=function(){var t=this;this.spaceRenderer.drawOnce((function(e,n){var r=t,o=r.spaceWidth,a=r.spaceHeight;e.clearRect(0,0,o,a);for(var l=0;l<1e3;l++){var u=i(c()*o),s=i(c()*a),p=i(4*(1-Math.sqrt(c()))),f=Math.sqrt(c()).toFixed(2);e.fillStyle="rgba(255, 255, 255, "+f+")",e.fillRect(u,s,p,p)}}))},t.prototype.createEmptyFillBar=function(t,e,n,r){var o=e+r,a=t+i(n/2),c=a+i(n/2),l=i(n/2),u=e+l,s=o-l,p=new Path2D;return p.arc(a,u,l,Math.PI,0),p.lineTo(c,s),p.arc(a,s,l,0,Math.PI),p.lineTo(t,u),p},t.prototype.drawHud=function(){var t=this,e=this,n=e.tileSize,r=e.viewportWidth,o=e.viewportHeight,a=i(n/4),c=i(1.5*n),l=i(n/2),u=l+c,s=r-i(n/2)-i(a/2),p=s-2*a,f=p-2*a,h=new Path2D,d=this.createEmptyFillBar(s,l,a,c);h.addPath(d);var y=this.createEmptyFillBar(p,l,a,c);h.addPath(y);var _=this.createEmptyFillBar(f,l,a,c);h.addPath(_),this.hudRenderer.ctx.clip(h),this.hudRenderer.drawLoop((function(e,n){e.clearRect(0,0,r,o),e.fillStyle="rgba(0, 0, 0, 0.25)",e.fill(h),e.fillStyle=_n;var l=i(t.hero.local.percentHydrated*c),d=u-l;e.fillRect(s,d,a,l),e.fillStyle=wn;var y=i(t.hero.local.percentWarm*c),_=u-y;e.fillRect(p,_,a,y),e.fillStyle="rgb(255, 215, 0)";var v=i(t.hero.local.percentSocial*c),w=u-v;e.fillRect(f,w,a,v),e.strokeStyle="rgb(50, 50, 50)",e.lineWidth=2,e.stroke(h)}))},t.prototype.drawFirelight=function(){var t=this,e=this.firelightSize,n=i(e/2),r=n,o=n;this.firelightRenderer.drawLoop((function(a,l){var u=t.world.daylight;if(1!==u){a.clearRect(0,0,e,e);var s=(1-u)*(n*(.9+.1*c())),p=a.createRadialGradient(r,o,i(s/5),r,o,s);p.addColorStop(0,gn),p.addColorStop(.2,gn),p.addColorStop(.4,bn),p.addColorStop(.6,bn),p.addColorStop(.75,"rgba(255, 255, 255, 0.25)"),p.addColorStop(1,"transparent"),a.fillStyle=p,a.fillRect(0,0,e,e)}}))},t.prototype.drawNightInto=function(t,n){var r=this,o=this.world.daylight;if(1!==o){var a=this,c=a.nightCtx,l=a.viewportWidth,u=a.viewportHeight,s=a.viewportOriginX,p=a.viewportOriginY,f=a.firelightSize;c.clearRect(0,0,l,u),c.fillStyle=vn,c.fillRect(0,0,l,u);var h=c.globalCompositeOperation;c.globalCompositeOperation="destination-out";var d=this.firelightRenderer.canvas,y=i(f/2);this.eachItemOfTypeInViewport(e.FIRE,s,p,(function(e,o,i){c.drawImage(d,0,0,f,f,o-y,i-y,f,f),r.flameRenderer.drawAnimated(t,n,o,i)}),1,1,1,1),c.globalCompositeOperation=h,t.globalAlpha=.35*(1-o),t.drawImage(this.nightRenderer.canvas,0,0,l,u,0,0,l,u),t.globalAlpha=1}},t.prototype.drawGroundLevel=function(t,e){var n=this,r=n.viewportWidth,o=n.viewportHeight,a=n.worldWidth,c=n.worldHeight,l=n.viewportOriginX,u=n.viewportOriginY;if(t.fillStyle="black",t.fillRect(0,0,r,o),l<0||u<0||l+r>a||u+o>c){var s=this.spaceWidth,p=this.spaceHeight;t.drawImage(this.spaceRenderer.canvas,0,0,s,p,0,0,r,o);var f=l<0?Math.abs(l):0,h=u<0?Math.abs(u):0,d=l+r>a?a-l:r,y=u+o>c?c-u:o,_=i(r/40);t.fillStyle="rgba(0, 0, 0, 0.5)",t.fillRect(f-_/2,h-_/2,d+_,y+_),t.fillRect(f-_,h-_,d+2*_,y+2*_),t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowColor="rgb(0, 0, 255)",t.shadowBlur=50,t.fillStyle="rgb(0, 0, 255)",t.fillRect(f-.5,h-.5,d+1,y+1),t.shadowOffsetX=0,t.shadowOffsetY=0,t.shadowColor="transparent",t.shadowBlur=0}t.drawImage(this.worldRenderer.canvas,l,u,r,o,0,0,r,o)},t.prototype.drawKneeLevel=function(t,n){var r=this,o=this,a=(o.viewportWidth,o.viewportHeight,o.viewportOriginX),c=o.viewportOriginY,l=o.tileSize;this.eachItemOfTypeInViewport(e.BOTTLE,a,c,(function(e,n,o){r.bottleRenderer.drawBottle(t,e,n,o)})),this.eachItemOfTypeInViewport(e.FIRE,a,c,(function(e,n,r){t.fillStyle=hn,t.fillRect(n-5,r-5,10,10),t.fillStyle="orangered",t.fillRect(n-4,r-5,8,6)}));var u=this.world.data.map,s=i(l/2);this.eachTileInViewport(a,c,(function(e,n,o,i,a,c){var l=u.valueAtTile(e,n);switch(U.structureFromTileValue(l)){case H.NONE:break;case H.TREE:r.treeRenderer.drawSprite(kn.STUMP,t,a+s,c+s)}}))},t.prototype.drawEyeLevel=function(t,e){var n=this,r=this.viewportOriginX,o=this.viewportOriginY;this.eachMudmanInViewport(r,o,(function(r,o,i){n.mudmanRenderer.drawMudman(t,r,o,i,e)}))},t.prototype.drawCanopyLevel=function(t,e){var n=this,r=this.world.data.map,o=this,a=o.tileSize,c=o.viewportOriginX,l=o.viewportOriginY,u=i(a/2),s=Un.length;this.eachTileInViewport(c,l,(function(e,o,i,a,c,l){var p=r.valueAtTile(e,o);switch(U.structureFromTileValue(p)){case H.NONE:break;case H.TREE:n.treeRenderer.drawSprite(Un[(e+3*o)%s],t,c+u,l+u)}}),0,1,1,1),this.eachMudmanInViewport(c,l,(function(r,o,i){n.mudmanRenderer.drawConvo(t,r,o,i,e)}))},t.prototype.drawBirdLevel=function(t,e){},t.prototype.drawCloudLevel=function(t,e){this.drawNightInto(t,e)},t.prototype.drawOrbitLevel=function(t,e){var n=this,r=n.viewportOriginX,o=n.viewportOriginY,a=n.viewportWidth,c=n.viewportHeight,l=this.hero.local.data.movingTarget,u=this.hero.local.destination;if(l){var s=e%500/500;t.strokeStyle=wn,t.globalAlpha=1-s,t.beginPath(),t.arc(l.x-r,l.y-o,i(.5*this.tileSize*s),0,2*Math.PI),t.stroke(),t.globalAlpha=1}else u&&(s=e%500/500,t.strokeStyle=yn,t.globalAlpha=1-s,t.beginPath(),t.arc(u.x-r,u.y-o,i(.5*this.tileSize*s),0,2*Math.PI),t.stroke(),t.globalAlpha=1);t.drawImage(this.hudRenderer.canvas,0,0,a,c,0,0,a,c)},t.prototype.drawLoop=function(){var t=this,e=this,n=e.viewportWidth,r=e.viewportHeight,o=e.worldWidth,i=e.worldHeight;this.viewportRenderer.drawLoop((function(e,a){if(t.world.data.timestamp=a,t.overlayFullMap)return e.clearRect(0,0,n,r),void e.drawImage(t.worldRenderer.canvas,0,0,o,i,0,0,n,r);t.drawGroundLevel(e,a),t.drawKneeLevel(e,a),t.drawEyeLevel(e,a),t.drawCanopyLevel(e,a),t.drawBirdLevel(e,a),t.drawCloudLevel(e,a),t.drawOrbitLevel(e,a),t.eachMudmanInViewport(t.viewportOriginX,t.viewportOriginY,(function(t,e,n){t.tick()}))}))},t.prototype.start=function(){this.drawWorld(),this.drawSpace(),this.drawHud(),this.drawFirelight(),this.drawLoop()},t.prototype.nextHero=function(){this.heroIndex=(this.heroIndex+1)%this.world.data.mudmen.length},t.prototype.prevHero=function(){this.heroIndex=0===this.heroIndex?this.world.data.mudmen.length-1:this.heroIndex-1},t}();const Vn=Yn;window.addEventListener("DOMContentLoaded",(function(){var t=document.getElementById("viewport"),e=new Vn(t,Q,24);e.start(),document.body.addEventListener("keydown",(function(t){switch(t.key){case"ArrowRight":e.nextHero();break;case"ArrowLeft":e.prevHero();break;case"m":e.overlayFullMap=!e.overlayFullMap;break;case"d":e.world.letItBeDay();break;case"n":e.world.letItBeNight()}})),t.addEventListener("click",(function(t){var n=e.hero.local,r=n.x,o=n.y,i=n.data,a=r-e.viewportWidth/2,c=o-e.viewportHeight/2,l=a+t.offsetX,u=c+t.offsetY;e.world.data.map.populatePath(i.path,r,o,l,u,i.eyesight);var s=e.world.data.items.itemAt(l,u,e.tileSize);s&&(e.hero.local.data.targetedItem=s)})),window.renderer=e,window.pathFinder=e.world.data.map.pathFinder}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,