(()=>{"use strict";const t=function(t){this.data=t};function e(t,e){var r=new Int16Array(2);return r[0]=t,r[1]=e,r}function r(t,e,r,n){var o=r-t,i=n-e;return Math.sqrt(Math.pow(o,2)+Math.pow(i,2))}function n(t,e,r,n,o,i){return r<=t&&t<=r+i&&n<=e&&e<=n+o}function o(t,r,n,o){o||(o=n,n=0);var i,a=Math.random()*(2*Math.PI),l=n/o,c=o*Math.sqrt((1,(i=Math.pow(l,2))+Math.random()*(1-i)));return e(Math.floor(t+c*Math.cos(a)),Math.floor(r+c*Math.sin(a)))}const i=function(){function t(){this.itemsById=new Map,this.idsByType=new Map}return t.prototype.idsFor=function(t){var e=this.idsByType.get(t);return e||(e=new Set,this.idsByType.set(t,e)),e},t.prototype.add=function(t){this.itemsById.set(t.id,t),this.idsFor(t.type).add(t.id)},t.prototype.find=function(t){var e=this.itemsById.get(t);if(!e)throw new Error("No item registered for the given ID");return e},t.prototype.forEachOfType=function(t,e){var r=this;this.idsFor(t).forEach((function(t){e(r.find(t))}))},t.prototype.findOfType=function(t,e){for(var r=this.idsFor(t).values(),n=r.next();!n.done;){var o=this.find(n.value);if(e(o))return o;n=r.next()}},t.prototype.findClosest=function(t,e,n,o){var i,a=void 0;return this.forEachOfType(t,(function(t){if(!t.held&&(!o||o(t))){var l=r(e,n,t.x,t.y);null!=a||(a=t),null!=i||(i=l),l<i&&(i=l,a=t)}})),a},t}(),a=function(){function t(t,e,r){this.rowCount=t,this.colCount=e,this.colPower=Math.ceil(Math.log2(e)),this.paddedColCount=1<<this.colPower;var n=t<<this.colPower;this.cells=new r(n)}return t.prototype.rowAtIndex=function(t){return t>>this.colPower},t.prototype.colAtIndex=function(t){return t&this.paddedColCount-1},t.prototype.indexAt=function(t,e){return(t<<this.colPower)+e},t.prototype.valueAt=function(t,e){var r=this.indexAt(t,e);return this.cells[r]},t.prototype.setValueAt=function(t,e,r){var n=this.indexAt(t,e);this.cells[n]=r},t.prototype.delValueAt=function(t,e){this.setValueAt(t,e,0)},t.prototype.clearValues=function(){this.cells.fill(0)},t.prototype.incValueAt=function(t,e){var r=this.indexAt(t,e);return++this.cells[r]},t.prototype.decValueAt=function(t,e){var r=this.indexAt(t,e);return--this.cells[r]},t.prototype.each=function(t){for(var e=0;e<this.rowCount;e++)for(var r=0;r<this.colCount;r++)t(e,r,this.valueAt(e,r))},t.prototype.fill=function(t){for(var e=0;e<this.rowCount;e++)for(var r=0;r<this.colCount;r++){var n=this.indexAt(e,r);this.cells[n]=t(e,r,this.cells[n])}},t}(),l=.5*(Math.sqrt(3)-1),c=(3-Math.sqrt(3))/6,s=1/6,u=(Math.sqrt(5)-1)/4,h=(5-Math.sqrt(5))/20,f=new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),p=new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]),d=class{constructor(t=Math.random){const e="function"==typeof t?t:function(t){let e=0,r=0,n=0,o=1;const i=function(){let t=4022871197;return function(e){e=e.toString();for(let r=0;r<e.length;r++){t+=e.charCodeAt(r);let n=.02519603282416938*t;t=n>>>0,n-=t,n*=t,t=n>>>0,n-=t,t+=4294967296*n}return 2.3283064365386963e-10*(t>>>0)}}();return e=i(" "),r=i(" "),n=i(" "),e-=i(t),e<0&&(e+=1),r-=i(t),r<0&&(r+=1),n-=i(t),n<0&&(n+=1),function(){const t=2091639*e+2.3283064365386963e-10*o;return e=r,r=n,n=t-(o=0|t)}}(t);this.p=function(t){const e=new Uint8Array(256);for(let t=0;t<256;t++)e[t]=t;for(let r=0;r<255;r++){const n=r+~~(t()*(256-r)),o=e[r];e[r]=e[n],e[n]=o}return e}(e),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(let t=0;t<512;t++)this.perm[t]=this.p[255&t],this.permMod12[t]=this.perm[t]%12}noise2D(t,e){const r=this.permMod12,n=this.perm;let o=0,i=0,a=0;const s=(t+e)*l,u=Math.floor(t+s),h=Math.floor(e+s),p=(u+h)*c,d=t-(u-p),y=e-(h-p);let _,T;d>y?(_=1,T=0):(_=0,T=1);const g=d-_+c,v=y-T+c,w=d-1+2*c,b=y-1+2*c,I=255&u,R=255&h;let O=.5-d*d-y*y;if(O>=0){const t=3*r[I+n[R]];O*=O,o=O*O*(f[t]*d+f[t+1]*y)}let A=.5-g*g-v*v;if(A>=0){const t=3*r[I+_+n[R+T]];A*=A,i=A*A*(f[t]*g+f[t+1]*v)}let m=.5-w*w-b*b;if(m>=0){const t=3*r[I+1+n[R+1]];m*=m,a=m*m*(f[t]*w+f[t+1]*b)}return 70*(o+i+a)}noise3D(t,e,r){const n=this.permMod12,o=this.perm;let i,a,l,c;const u=.3333333333333333*(t+e+r),h=Math.floor(t+u),p=Math.floor(e+u),d=Math.floor(r+u),y=(h+p+d)*s,_=t-(h-y),T=e-(p-y),g=r-(d-y);let v,w,b,I,R,O;_>=T?T>=g?(v=1,w=0,b=0,I=1,R=1,O=0):_>=g?(v=1,w=0,b=0,I=1,R=0,O=1):(v=0,w=0,b=1,I=1,R=0,O=1):T<g?(v=0,w=0,b=1,I=0,R=1,O=1):_<g?(v=0,w=1,b=0,I=0,R=1,O=1):(v=0,w=1,b=0,I=1,R=1,O=0);const A=_-v+s,m=T-w+s,N=g-b+s,S=_-I+2*s,P=T-R+2*s,L=g-O+2*s,F=_-1+.5,G=T-1+.5,M=g-1+.5,W=255&h,E=255&p,C=255&d;let K=.6-_*_-T*T-g*g;if(K<0)i=0;else{const t=3*n[W+o[E+o[C]]];K*=K,i=K*K*(f[t]*_+f[t+1]*T+f[t+2]*g)}let B=.6-A*A-m*m-N*N;if(B<0)a=0;else{const t=3*n[W+v+o[E+w+o[C+b]]];B*=B,a=B*B*(f[t]*A+f[t+1]*m+f[t+2]*N)}let x=.6-S*S-P*P-L*L;if(x<0)l=0;else{const t=3*n[W+I+o[E+R+o[C+O]]];x*=x,l=x*x*(f[t]*S+f[t+1]*P+f[t+2]*L)}let j=.6-F*F-G*G-M*M;if(j<0)c=0;else{const t=3*n[W+1+o[E+1+o[C+1]]];j*=j,c=j*j*(f[t]*F+f[t+1]*G+f[t+2]*M)}return 32*(i+a+l+c)}noise4D(t,e,r,n){const o=this.perm;let i,a,l,c,s;const f=(t+e+r+n)*u,d=Math.floor(t+f),y=Math.floor(e+f),_=Math.floor(r+f),T=Math.floor(n+f),g=(d+y+_+T)*h,v=t-(d-g),w=e-(y-g),b=r-(_-g),I=n-(T-g);let R=0,O=0,A=0,m=0;v>w?R++:O++,v>b?R++:A++,v>I?R++:m++,w>b?O++:A++,w>I?O++:m++,b>I?A++:m++;const N=R>=3?1:0,S=O>=3?1:0,P=A>=3?1:0,L=m>=3?1:0,F=R>=2?1:0,G=O>=2?1:0,M=A>=2?1:0,W=m>=2?1:0,E=R>=1?1:0,C=O>=1?1:0,K=A>=1?1:0,B=m>=1?1:0,x=v-N+h,j=w-S+h,H=b-P+h,k=I-L+h,D=v-F+2*h,X=w-G+2*h,U=b-M+2*h,z=I-W+2*h,Y=v-E+3*h,V=w-C+3*h,q=b-K+3*h,J=I-B+3*h,Q=v-1+4*h,Z=w-1+4*h,$=b-1+4*h,tt=I-1+4*h,et=255&d,rt=255&y,nt=255&_,ot=255&T;let it=.6-v*v-w*w-b*b-I*I;if(it<0)i=0;else{const t=o[et+o[rt+o[nt+o[ot]]]]%32*4;it*=it,i=it*it*(p[t]*v+p[t+1]*w+p[t+2]*b+p[t+3]*I)}let at=.6-x*x-j*j-H*H-k*k;if(at<0)a=0;else{const t=o[et+N+o[rt+S+o[nt+P+o[ot+L]]]]%32*4;at*=at,a=at*at*(p[t]*x+p[t+1]*j+p[t+2]*H+p[t+3]*k)}let lt=.6-D*D-X*X-U*U-z*z;if(lt<0)l=0;else{const t=o[et+F+o[rt+G+o[nt+M+o[ot+W]]]]%32*4;lt*=lt,l=lt*lt*(p[t]*D+p[t+1]*X+p[t+2]*U+p[t+3]*z)}let ct=.6-Y*Y-V*V-q*q-J*J;if(ct<0)c=0;else{const t=o[et+E+o[rt+C+o[nt+K+o[ot+B]]]]%32*4;ct*=ct,c=ct*ct*(p[t]*Y+p[t+1]*V+p[t+2]*q+p[t+3]*J)}let st=.6-Q*Q-Z*Z-$*$-tt*tt;if(st<0)s=0;else{const t=o[et+1+o[rt+1+o[nt+1+o[ot+1]]]]%32*4;st*=st,s=st*st*(p[t]*Q+p[t+1]*Z+p[t+2]*$+p[t+3]*tt)}return 27*(i+a+l+c+s)}};var y=new d("continents"),_=new d("land"),T=new d("local");function g(t,e){return T.noise2D(t,e)}var v=new d("moisture");function w(t,e){for(var r=t.length-1;r>=0;r--)if(e(t[r],r))return t[r]}var b=function(t,e,r,n,o){this.x=t,this.y=e,this.distanceTraveled=r,this.distanceToEnd=n,this.parent=o,this.cost=r+n},I=function(){function t(t){this.cellBlocked=t,this.nodesToWalk=[],this.walkedNodes=[]}return t.prototype.reset=function(){this.nodesToWalk.length=0,this.walkedNodes.length=0},t.prototype.populatePath=function(t,e,n,o,i,a,l,c){var s=this;this.reset(),t.length=0,e=Math.floor(e),n=Math.floor(n),o=Math.floor(o),i=Math.floor(i),l=Math.floor(l);var u,h=this.nodesToWalk,f=this.walkedNodes,p=r(e,n,o,i);if(p>a&&(o=Math.floor(e+a/p*(o-e)),i=Math.floor(n+a/p*(i-n)),p=a),!this.cellBlocked(o,i))for(h.push(new b(e,n,0,p,null));h.length;){if((u=this.popLowestCostUnwalkedNode()).distanceToEnd<=l){var d=new b(o,i,u.distanceTraveled+u.distanceToEnd,0,u);return void this.unchainIntoPath(d,t,c)}if(u.distanceTraveled>4*a)return;f.push(u),this.forEachNeighborOf(u.x,u.y,l,(function(t,e,n){if(!s.cellBlocked(t,e)){var a=u.distanceTraveled+n;if(!w(f,(function(r){return r.x===t&&r.y===e}))){var l=w(h,(function(r){return r.x===t&&r.y===e}));if(l)l.parent=u,l.distanceTraveled=a,l.cost=a+l.distanceToEnd;else{var c=r(t,e,o,i);h.push(new b(t,e,a,c,u))}}}}))}},t.prototype.popLowestCostUnwalkedNode=function(){var t=this.nodesToWalk;if(0!==t.length){if(1===t.length)return t.pop();for(var e=0,r=t[e],n=1;n<t.length;n++){var o=t[n];o.cost<r.cost&&(e=n,r=o)}return t.splice(e,1),r}},t.prototype.unchainIntoPath=function(t,e,r){e.push(t),r&&r(t),t.parent&&this.unchainIntoPath(t.parent,e,r)},t.prototype.forEachNeighborOf=function(t,e,r,n){var o,i=r,a=1.4142135623730951*i;n(t-r,o=e-r,a),n(t,o,i),n(t+r,o,a),n(t-r,o=e,i),n(t+r,o,i),n(t-r,o=e+r,a),n(t,o,i),n(t+r,o,a)},t}();const R=I;function O(t,e,r){return t<<31-r-e}function A(t,e,r){var n=31-e;return t%Math.pow(2,n)>>n-r}const m=function(){function t(t,e,r){var n=this;this.tileSize=r,this.grid=new a(t,e,Uint32Array),this.pathFinder=new R((function(t,e){return!n.walkableAt(t,e)}))}return t.fillWithTerrain=function(t){var e=this;t.fill((function(r,n,o){var i=n/t.colCount,a=r/t.rowCount,l=e.noiseToByte(function(t,e){return(1*function(t,e){return y.noise2D(t,e)}(1.75*t,1.75*e)+.75*function(t,e){return _.noise2D(t,e)}(5*t,5*e)+.25*g(16*t,16*e)+.25*g(32*t,32*e))/2.25}(i,a)),c=l<128,s=Math.floor(Math.max(l-191,0)/64*255),u=(128-Math.abs(l-128))/128*204,h=Math.max(u,e.noiseToByte(function(t,e){return v.noise2D(t,e)}(i,a))-s);return e.tileValue(l,h,0,c)}))},t.eachTile=function(t,e){var r=this;t.each((function(t,n,o){e(t,n,r.elevationFromTileValue(o),r.moistureFromTileValue(o),r.structureFromTileValue(o),r.underwaterFromTileValue(o))}))},t.feedMapper=function(t,e,r,n){var o=t.valueAt(e,r);return n(e,r,this.elevationFromTileValue(o),this.moistureFromTileValue(o),this.structureFromTileValue(o),this.underwaterFromTileValue(o))},t.eachNeighboringTile=function(e,r,n,o){var i,a;i=r-1,a=n-1,t.feedMapper(e,i,a,o),a=n,t.feedMapper(e,i,a,o),a=n+1,t.feedMapper(e,i,a,o),i=r,a=n-1,t.feedMapper(e,i,a,o),a=n+1,t.feedMapper(e,i,a,o),i=r+1,a=n-1,t.feedMapper(e,i,a,o),a=n,t.feedMapper(e,i,a,o),a=n+1,t.feedMapper(e,i,a,o)},t.noiseToByte=function(t){return Math.floor(128*(t+1))},t.tileValue=function(t,e,r,n){return O(t,0,8)|O(e,8,8)|O(r,16,8)|O(n?1:0,24,1)},t.elevationFromTileValue=function(t){return A(t,0,8)},t.moistureFromTileValue=function(t){return A(t,8,8)},t.structureFromTileValue=function(t){return A(t,16,8)},t.underwaterFromTileValue=function(t){return Boolean(A(t,24,1))},t.walkableFromTileValue=function(t){return!this.underwaterFromTileValue(t)&&!this.structureFromTileValue(t)},Object.defineProperty(t.prototype,"rowCount",{get:function(){return this.grid.rowCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"colCount",{get:function(){return this.grid.colCount},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"width",{get:function(){return this.colCount*this.tileSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.rowCount*this.tileSize},enumerable:!1,configurable:!0}),t.prototype.xToCol=function(t){return Math.floor(t/this.tileSize)},t.prototype.yToRow=function(t){return Math.floor(t/this.tileSize)},t.prototype.fillWithTerrain=function(){t.fillWithTerrain(this.grid)},t.prototype.eachTile=function(e){t.eachTile(this.grid,e)},t.prototype.eachNeighboringTile=function(e,r,n){t.eachNeighboringTile(this.grid,e,r,n)},t.prototype.randomCoordsOnLand=function(){for(var r=this.width,n=this.height,o=0,i=0,a=-1;a<129;)o=Math.floor(Math.random()*r),i=Math.floor(Math.random()*n),a=t.elevationFromTileValue(this.valueAt(o,i));return e(o,i)},t.prototype.randomTileCoordsOnLand=function(){var t=this.randomCoordsOnLand();return t[0]=Math.floor(t[0]/this.tileSize),t[1]=Math.floor(t[1]/this.tileSize),t},t.prototype.populatePath=function(t,e,r,n,o,i){this.pathFinder.populatePath(t,e,r,n,o,i,this.tileSize)},t.prototype.valueAt=function(t,e){return this.grid.valueAt(this.yToRow(e),this.xToCol(t))},t.prototype.inBounds=function(t,e){return 0<=t&&0<=e&&t<this.width&&e<this.height},t.prototype.walkableAt=function(e,r){return!!this.inBounds(e,r)&&t.walkableFromTileValue(this.valueAt(e,r))},t.prototype.underwaterAt=function(e,r){return t.underwaterFromTileValue(this.valueAt(e,r))||!this.inBounds(e,r)},t}();var N;!function(t){t[t.WATER=0]="WATER",t[t.FIRE=1]="FIRE"}(N||(N={}));const S=function(){function t(t,e,r){this.id=Symbol(),this.type=t,this.x=e,this.y=r,this.held=!1,this.used=!1}return t.prototype.use=function(t){this.used=!0},t}();var P,L=(P=function(t,e){return P=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},P(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}P(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});const F=function(t){function e(e,r){return t.call(this,N.FIRE,e,r)||this}return L(e,t),e.prototype.use=function(t){t.data.sitting=!0},e}(S);var G=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const M=function(t){function e(e,r,n){var o=t.call(this,N.WATER,r,n)||this;return o.volume=e,o}return G(e,t),e.prototype.use=function(e){t.prototype.use.call(this,e),e.hydrate(this.volume)},e}(S);var W=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),E=function(t){function e(e){return t.call(this,e)||this}return W(e,t),Object.defineProperty(e.prototype,"dayElapsed",{get:function(){var t=this.data,e=t.timestamp,r=t.dayLength;return(e+.25*r)%r/r},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDawn",{get:function(){var t=this.dayElapsed;return.2<=t&&t<=.3},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDay",{get:function(){var t=this.dayElapsed;return.25<=t&&t<=.75},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isDusk",{get:function(){var t=this.dayElapsed;return.7<=t&&t<=.8},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"isNight",{get:function(){return!this.isDay},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"daylight",{get:function(){return this.isDawn?(this.dayElapsed-.2)/.1:this.isDusk?1-(this.dayElapsed-.7)/.1:this.isDay?1:0},enumerable:!1,configurable:!0}),e}(t),C=new i,K=new m(512,512,32);K.fillWithTerrain();for(var B=0;B<1e3;B++){var x=K.randomCoordsOnLand();C.add(new M(100,x[0],x[1]))}for(B=0;B<1e3;B++)x=K.randomCoordsOnLand(),C.add(new F(x[0],x[1]));C.add(new F(300,210));var j=new E({timestamp:0,map:K,items:C,mudmen:[],dayLength:24e3});function H(t,e){void 0===e&&(e=.5);var r=1-e;return Math.pow(t,r)}const k=function(){function t(t,e,r){this.root=t,this.current=t,this.world=r,this.local=e}return t.prototype.tick=function(){this.current.run(this.local,this.world)},t}();var D=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const X=function(t){function n(e){return t.call(this,null!=e?e:n.defaults)||this}return D(n,t),Object.defineProperty(n,"defaults",{get:function(){return{currentX:0,currentY:0,path:[],unreachable:[],size:16,moveSpeed:5,hydration:10,eyesight:300,inventory:new Map,xDirection:1,yDirection:1,sitting:!1}},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"x",{get:function(){return this.data.currentX},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"y",{get:function(){return this.data.currentY},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"hasPath",{get:function(){return this.data.path.length>0},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"destination",{get:function(){return this.data.path[0]},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"isNearDestination",{get:function(){var t=this.destination;return!t||this.isNear(t.x,t.y)},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"nearbyThreshold",{get:function(){return 5*this.data.moveSpeed},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"percentHydrated",{get:function(){return this.data.hydration/100},enumerable:!1,configurable:!0}),n.prototype.clearPath=function(){this.data.path.length=0,this.data.unreachable.length=0},n.prototype.setCurrentPosition=function(t,e){var r=this.data.currentX,n=this.data.currentY;t=Math.floor(t),e=Math.floor(e),r===t?n!==e&&(this.data.xDirection=0):this.data.xDirection=r<t?1:-1,n!==e&&(this.data.yDirection=n<e?1:-1),r===t&&n===e||(this.data.sitting=!1),this.data.currentX=t,this.data.currentY=e},n.prototype.moveToward=function(t,r,n){var o=this.data,i=o.currentX,a=o.currentY,l=null!=n?n:this.data.moveSpeed,c=e(t-i,r-a),s=c[0],u=c[1],h=Math.sqrt(Math.pow(s,2)+Math.pow(u,2)),f=l>h?1:l/h,p=f*s,d=f*u;this.setCurrentPosition(i+p,a+d)},n.prototype.followPath=function(t){var e=this.data.path,n=null!=t?t:this.data.moveSpeed,o=e[e.length-1];if(o){if(o.x===this.x&&o.y===this.y)return e.pop(),void this.followPath(n);var i=r(this.x,this.y,o.x,o.y);i>n?this.moveToward(o.x,o.y,n):i<=n&&(this.setCurrentPosition(o.x,o.y),e.pop(),this.followPath(n-i))}else this.data.unreachable.length=0},n.prototype.dehydrate=function(t){void 0===t&&(t=1),this.data.hydration=Math.max(this.data.hydration-t,0)},n.prototype.hydrate=function(t){void 0===t&&(t=1),this.data.hydration=Math.min(this.data.hydration+t,100)},n.prototype.inventoryOf=function(t){var e=this.data.inventory.get(t);return e||(e=new Set,this.data.inventory.set(t,e)),e},n.prototype.pickUp=function(t){t.held=!0,this.inventoryOf(t.type).add(t)},n.prototype.unusedFromInventory=function(t){for(var e=this.inventoryOf(t).values(),r=e.next();!r.done;){if(!r.value.used)return r.value;r=e.next()}},n.prototype.isUnreachable=function(t,e){return!!this.data.unreachable.find((function(r){return r[0]===t&&r[1]===e}))},n.prototype.isWithinEyesight=function(t,e){return r(this.x,this.y,t,e)<=this.data.eyesight},n.prototype.isNear=function(t,e){return r(this.x,this.y,t,e)<=this.nearbyThreshold},n.prototype.isAt=function(t,e){return this.x===t&&this.y===e},n.prototype.isOneStepAwayFrom=function(t,e){return r(this.x,this.y,t,e)<=this.data.moveSpeed},n.prototype.distanceTo=function(t,e){return r(this.x,this.y,t,e)},n}(t);var U;!function(t){t[t.RUNNING=0]="RUNNING",t[t.SUCCESS=1]="SUCCESS",t[t.FAILURE=2]="FAILURE"}(U||(U={}));const z=U,Y=function(){function t(){this.status=z.RUNNING,this.level=0}return t.prototype.init=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},t.prototype.process=function(t,e){throw new Error("Method #process must be implemented by node classes.")},t.prototype.run=function(e,r){if(t.debug){var n=" |".repeat(this.level);console.log(n+"Processing node: "+this.constructor.name),this.process(e,r),console.log(n+"Processed. Result: "+this.status)}else this.process(e,r)},t.prototype.incrementLevel=function(){this.level+=1},Object.defineProperty(t.prototype,"succeeded",{get:function(){return this.status===z.SUCCESS},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"failed",{get:function(){return this.status===z.FAILURE},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"running",{get:function(){return this.status===z.RUNNING},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"finished",{get:function(){return!this.running},enumerable:!1,configurable:!0}),t.prototype.succeed=function(){this.status=z.SUCCESS},t.prototype.fail=function(){this.status=z.FAILURE},t.prototype.reset=function(){this.status=z.RUNNING},t.debug=!1,t}();var V=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const q=function(t){function e(){for(var e,r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var o=t.call(this)||this;return o.shuffle=!1,1===r.length?(o.shuffle=!1,o.children=r[0]):(o.shuffle=null!==(e=r[0].shuffle)&&void 0!==e&&e,o.children=r[1]),o.children.forEach((function(t){return t.incrementLevel()})),o}return V(e,t),e.prototype.reset=function(){t.prototype.reset.call(this),this.children.forEach((function(t){t.reset()}))},e.prototype.incrementLevel=function(){t.prototype.incrementLevel.call(this),this.children.forEach((function(t){return t.incrementLevel()}))},e.prototype.shuffleIfNecessary=function(){this.shuffle&&function(t){for(var e=0;e<t.length;e++){var r=e+Math.floor(Math.random()*(t.length-e)),n=t[e];t[e]=t[r],t[r]=n}}(this.children)},e}(Y);var J=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),Q=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return J(e,t),e.prototype.process=function(t,e){this.shuffleIfNecessary();for(var r=0;r<this.children.length;r++){var n=this.children[r];if(n.run(t,e),n.failed&&this.fail(),n.running||this.failed)return}this.succeed()},e}(q);const Z=Q;var $=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),tt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return $(e,t),e.prototype.process=function(t,e){this.shuffleIfNecessary();for(var r=0;r<this.children.length;r++){var n=this.children[r];if(n.run(t,e),n.succeeded&&this.succeed(),n.running||this.succeeded)return}this.fail()},e}(q);const et=tt;var rt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const nt=function(t){function e(e){var r=t.call(this)||this;return r.child=e,r.child.incrementLevel(),r}return rt(e,t),e.prototype.reset=function(){t.prototype.reset.call(this),this.child.reset()},e.prototype.incrementLevel=function(){t.prototype.incrementLevel.call(this),this.child.incrementLevel()},e.prototype.process=function(t,e){this.child.run(t,e),this.status=this.child.status},e}(Y);var ot=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const it=function(t){function e(e){var r=t.call(this)||this;return r.lambda=e,r}return ot(e,t),e.prototype.process=function(t,e){var r=this.lambda(t,e);this.status=!0===r?z.SUCCESS:!1===r?z.FAILURE:z.RUNNING},e}(Y);var at=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const lt=function(t){function e(){return t.call(this,(function(){return null}))||this}return at(e,t),e}(it);var ct=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const st=function(t){function e(e){return t.call(this,null!=e?e:new lt)||this}return ct(e,t),e.prototype.process=function(t,e){this.child.run(t,e),this.fail()},e}(nt);var ut=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const ht=function(t){function e(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var n=t.call(this,1===e.length?e[0]:e[1])||this;return n.repeated=0,1===e.length?(n.times=-1,n.child=e[0]):(n.times=e[0],n.child=e[1]),n}return ut(e,t),e.prototype.process=function(t,e){this.times>=0&&this.repeated>=this.times?this.succeed():(this.child.reset(),this.child.run(t,e),this.repeated+=1)},e}(nt);var ft=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return ft(e,t),e}(Y);var dt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const yt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return dt(e,t),e.prototype.process=function(t,e){t.hasPath?(t.followPath(),t.hasPath||this.succeed()):this.succeed()},e}(pt);var _t=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Tt=function(t){function r(e){var r=t.call(this)||this;return r.itemType=e,r}return _t(r,t),r.prototype.process=function(t,r){var n=r.data.items.findClosest(this.itemType,t.x,t.y,(function(e){return!t.isUnreachable(e.x,e.y)}));if(n){if(t.isAt(n.x,n.y))return t.clearPath(),void this.succeed();var i=t.destination;if(i){if(i.x===n.x&&i.y===n.y)return void this.succeed();if(!t.isWithinEyesight(n.x,n.y))return void this.succeed();t.clearPath()}if(t.isOneStepAwayFrom(n.x,n.y)){var a=new b(n.x,n.y,t.distanceTo(n.x,n.y),0,null);return t.data.path.push(a),void this.succeed()}if(!t.isWithinEyesight(n.x,n.y)){for(var l=t.data,c=l.eyesight,s=l.path,u=0;!t.hasPath&&u<25;){u+=1;var h=o(t.x,t.y,c);r.data.map.populatePath(s,t.x,t.y,h[0],h[1],c)}return t.hasPath?void this.succeed():void this.fail()}r.data.map.populatePath(t.data.path,t.x,t.y,n.x,n.y,t.data.eyesight),t.hasPath?this.succeed():(t.data.unreachable.push(e(n.x,n.y)),this.fail())}else this.fail()},r}(pt);var gt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const vt=function(t){function n(e){var r=t.call(this)||this;return r.itemType=e,r}return gt(n,t),n.prototype.process=function(t,n){var i=n.data.items.findClosest(this.itemType,t.x,t.y,(function(e){return!t.isUnreachable(e.x,e.y)}));if(i){if(t.isNear(i.x,i.y))return t.clearPath(),void this.succeed();var a=t.destination;if(a){if(r(a.x,a.y,i.x,i.y)<=t.nearbyThreshold)return void this.succeed();if(!t.isWithinEyesight(i.x,i.y))return void this.succeed();t.clearPath()}for(var l=i.x-t.x,c=i.y-t.y,s=Math.sqrt(Math.pow(l,2)+Math.pow(c,2)),u=(s-t.nearbyThreshold)/s,h=t.x+(l<0?Math.floor(u*l):Math.ceil(u*l)),f=t.y+(c<0?Math.floor(u*c):Math.ceil(u*c)),p=0;!n.data.map.walkableAt(h,f);){if(p>25)return t.data.unreachable.push(e(i.x,i.y)),void this.fail();p+=1;var d=o(i.x,i.y,t.data.moveSpeed,t.nearbyThreshold);h=d[0],f=d[1]}if(!t.isWithinEyesight(h,f)){for(var y=t.data,_=y.eyesight,T=y.path,g=0;!t.hasPath&&g<25;){g+=1;var v=o(t.x,t.y,_);n.data.map.populatePath(T,t.x,t.y,v[0],v[1],_)}return t.hasPath?void this.succeed():void this.fail()}n.data.map.populatePath(t.data.path,t.x,t.y,h,f,t.data.eyesight),t.hasPath?this.succeed():(t.data.unreachable.push(e(i.x,i.y)),this.fail())}else this.fail()},n}(pt);var wt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const bt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return wt(e,t),e.prototype.process=function(t,e){t.data.hydration>0?this.succeed():this.fail()},e}(pt);var It=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Rt=function(t){function e(e){var r=t.call(this)||this;return r.itemType=e,r}return It(e,t),e.prototype.process=function(t,e){var r=e.data.items.findOfType(this.itemType,(function(e){return!e.used&&!e.held&&e.x===t.x&&e.y===t.y}));r?(t.pickUp(r),this.succeed()):this.fail()},e}(pt);var Ot=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const At=function(t){function e(e){var r=t.call(this)||this;return r.itemType=e,r}return Ot(e,t),e.prototype.process=function(t,e){var r=t.unusedFromInventory(this.itemType);r&&!r.used?(r.use(t),this.succeed()):this.fail()},e}(Y);var mt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Nt=function(t){function e(){return t.call(this,new et([new bt,new At(N.WATER),new Z([new Rt(N.WATER),new At(N.WATER)])]))||this}return mt(e,t),e}(nt);var St=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Pt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return St(e,t),e.prototype.process=function(t,e){e.isDay?this.succeed():this.fail()},e}(pt);var Lt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Ft=function(t){function e(e){var r=t.call(this)||this;return r.itemType=e,r}return Lt(e,t),e.prototype.process=function(t,e){var r=e.data.items.findClosest(this.itemType,t.x,t.y);r&&t.isNear(r.x,r.y)?this.succeed():this.fail()},e}(pt);var Gt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Mt=function(t){function e(){return t.call(this,new Ft(N.FIRE))||this}return Gt(e,t),e}(nt);var Wt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Et=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return Wt(e,t),e.prototype.process=function(t){t.clearPath(),t.data.sitting=!0,this.succeed()},e}(pt);var Ct=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const Kt=function(t){function e(){return t.call(this,new et([new Pt,new Z([new Mt,new Et])]))||this}return Ct(e,t),e}(nt);var Bt=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();const xt=function(t){function e(){return t.call(this,new ht(new Z([new yt,new et([new Nt,new st(new Tt(N.WATER))]),new et([new Kt,new st(new vt(N.FIRE))])])))||this}return Bt(e,t),e}(nt),jt=function(){function t(t,e,r,n){var o=new xt,i=X.defaults;(t||0===t)&&(i.currentX=t),(e||0===e)&&(i.currentY=e),(r||0===r)&&(i.eyesight=r),n&&(i.size=n),this.local=new X(i),this.behaviorTree=new k(o,this.local,j)}return t.prototype.tick=function(){this.behaviorTree.tick(),this.local.dehydrate(.5)},t}(),Ht=function(){function t(t,e,r,n){void 0===n&&(n=24),this.lastFrameAt=0,this.canvas=t;var o=this.canvas.getContext("2d");if(!o)throw new Error("CanvasRenderingContext2D not supported");this.setCanvasSize(e,r),this.ctx=o,this.fps=n}return Object.defineProperty(t.prototype,"msPerFrame",{get:function(){return 1e3/this.fps},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nextFrameAt",{get:function(){return this.lastFrameAt+this.msPerFrame},enumerable:!1,configurable:!0}),t.prototype.setCanvasSize=function(t,e){this.canvas.width=t,this.canvas.height=e,this.canvas.style.width=t+"px",this.canvas.style.height=e+"px"},t.prototype.drawLoop=function(t){var e=this,r=function(n){requestAnimationFrame(r),n<e.nextFrameAt||(e.lastFrameAt=n,t(e.ctx,n))};requestAnimationFrame(r)},t.prototype.drawOnce=function(t){var e=this;requestAnimationFrame((function(r){t(e.ctx,r)}))},t}(),kt=function(){function t(t,e,r){void 0===r&&(r=24),this.defaultSpriteWidth=t,this.defaultSpriteHeight=e,this.fps=r,this.spriteRenderers=[],this.defaultSpriteWidth=Math.floor(t),this.defaultSpriteHeight=Math.floor(e)}return t.prototype.addSprite=function(t,e){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var o,i,a,l=r[0],c=r[1],s=r[2];"function"==typeof l?(o=this.defaultSpriteWidth,i=this.defaultSpriteHeight,a=l):"function"==typeof c?(o=Math.floor(l),i=o,a=c):(o=Math.floor(l),i=Math.floor(c),a=s);var u=new Ht(document.createElement("canvas"),o+2*e,i+2*e,this.fps);this.spriteRenderers[t]=u,u.drawOnce((function(t){a(t,o,i,Math.floor(o/2),Math.floor(i/2),0+e,o-e,i-e,0+e)}))},t.prototype.mirrorSprite=function(t,e){var r=this.spriteRenderers[t],n=r.canvas,o=n.width,i=n.height,a=new Ht(document.createElement("canvas"),o,i,r.fps);this.spriteRenderers[e]=a,a.drawOnce((function(t){t.save(),t.scale(-1,1),t.drawImage(r.canvas,0,0,-1*o,i),t.restore()}))},t.prototype.drawSprite=function(t,e,r,n,o,i,a){void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=1);var l=this.spriteRenderers[t].canvas,c=l.width,s=l.height,u=r-Math.floor(.5*c)+o,h=n-Math.floor(.5*s)+i,f=Math.floor(c*a),p=Math.floor(s*a);e.drawImage(l,0,0,c,s,u,h,f,p)},t}();var Dt,Xt="rgb(165, 42, 42)",Ut="rgb(120, 50, 0)",zt="rgb(47, 79, 79)",Yt="rgb(0, 100, 200)",Vt="rgb(255, 255, 255)",qt="rgba(255, 255, 255, 0.5)";!function(t){t[t.STANDING_FRONT=0]="STANDING_FRONT",t[t.STANDING_BACK=1]="STANDING_BACK",t[t.STANDING_RIGHT_FRONT=2]="STANDING_RIGHT_FRONT",t[t.STANDING_RIGHT_BACK=3]="STANDING_RIGHT_BACK",t[t.STANDING_LEFT_FRONT=4]="STANDING_LEFT_FRONT",t[t.STANDING_LEFT_BACK=5]="STANDING_LEFT_BACK",t[t.SITTING_FRONT=6]="SITTING_FRONT",t[t.SITTING_BACK=7]="SITTING_BACK",t[t.SITTING_RIGHT_FRONT=8]="SITTING_RIGHT_FRONT",t[t.SITTING_RIGHT_BACK=9]="SITTING_RIGHT_BACK",t[t.SITTING_LEFT_FRONT=10]="SITTING_LEFT_FRONT",t[t.SITTING_LEFT_BACK=11]="SITTING_LEFT_BACK",t[t.WALKING_1_FRONT=12]="WALKING_1_FRONT",t[t.WALKING_2_FRONT=13]="WALKING_2_FRONT",t[t.WALKING_3_FRONT=14]="WALKING_3_FRONT",t[t.WALKING_4_FRONT=15]="WALKING_4_FRONT",t[t.WALKING_1_BACK=16]="WALKING_1_BACK",t[t.WALKING_2_BACK=17]="WALKING_2_BACK",t[t.WALKING_3_BACK=18]="WALKING_3_BACK",t[t.WALKING_4_BACK=19]="WALKING_4_BACK",t[t.WALKING_RIGHT_1_FRONT=20]="WALKING_RIGHT_1_FRONT",t[t.WALKING_RIGHT_2_FRONT=21]="WALKING_RIGHT_2_FRONT",t[t.WALKING_RIGHT_3_FRONT=22]="WALKING_RIGHT_3_FRONT",t[t.WALKING_RIGHT_4_FRONT=23]="WALKING_RIGHT_4_FRONT",t[t.WALKING_RIGHT_1_BACK=24]="WALKING_RIGHT_1_BACK",t[t.WALKING_RIGHT_2_BACK=25]="WALKING_RIGHT_2_BACK",t[t.WALKING_RIGHT_3_BACK=26]="WALKING_RIGHT_3_BACK",t[t.WALKING_RIGHT_4_BACK=27]="WALKING_RIGHT_4_BACK",t[t.WALKING_LEFT_1_FRONT=28]="WALKING_LEFT_1_FRONT",t[t.WALKING_LEFT_2_FRONT=29]="WALKING_LEFT_2_FRONT",t[t.WALKING_LEFT_3_FRONT=30]="WALKING_LEFT_3_FRONT",t[t.WALKING_LEFT_4_FRONT=31]="WALKING_LEFT_4_FRONT",t[t.WALKING_LEFT_1_BACK=32]="WALKING_LEFT_1_BACK",t[t.WALKING_LEFT_2_BACK=33]="WALKING_LEFT_2_BACK",t[t.WALKING_LEFT_3_BACK=34]="WALKING_LEFT_3_BACK",t[t.WALKING_LEFT_4_BACK=35]="WALKING_LEFT_4_BACK"}(Dt||(Dt={}));var Jt=[Dt.WALKING_1_FRONT,Dt.WALKING_2_FRONT,Dt.WALKING_3_FRONT,Dt.WALKING_4_FRONT],Qt=[Dt.WALKING_1_BACK,Dt.WALKING_2_BACK,Dt.WALKING_3_BACK,Dt.WALKING_4_BACK],Zt=[Dt.WALKING_RIGHT_1_FRONT,Dt.WALKING_RIGHT_2_FRONT,Dt.WALKING_RIGHT_3_FRONT,Dt.WALKING_RIGHT_4_FRONT],$t=[Dt.WALKING_RIGHT_1_BACK,Dt.WALKING_RIGHT_2_BACK,Dt.WALKING_RIGHT_3_BACK,Dt.WALKING_RIGHT_4_BACK],te=[Dt.WALKING_LEFT_1_FRONT,Dt.WALKING_LEFT_2_FRONT,Dt.WALKING_LEFT_3_FRONT,Dt.WALKING_LEFT_4_FRONT],ee=[Dt.WALKING_LEFT_1_BACK,Dt.WALKING_LEFT_2_BACK,Dt.WALKING_LEFT_3_BACK,Dt.WALKING_LEFT_4_BACK],re=function(t){return Math.floor(t)};const ne=function(){function t(t,e){void 0===t&&(t=20),void 0===e&&(e=24),this.mudmanSize=t,this.mudmanSize=re(t),this.spriteRenderer=new kt(this.canvasWidth,this.canvasHeight,e),this.addStandingSprites(),this.addSittingSprites(),this.addWalkingSprites()}return Object.defineProperty(t.prototype,"canvasWidth",{get:function(){return 2*this.mudmanSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"canvasHeight",{get:function(){return 3*this.mudmanSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyCenterX",{get:function(){return re(this.canvasWidth/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyCenterY",{get:function(){return re(this.canvasHeight/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyTopY",{get:function(){return re(this.bodyCenterY-this.bodyHeight/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyBottomY",{get:function(){return this.bodyTopY+this.bodyHeight},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyLeftX",{get:function(){return re(this.bodyCenterX-this.bodyWidth/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyRightX",{get:function(){return this.bodyLeftX+this.bodyWidth},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyWidth",{get:function(){return this.mudmanSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"bodyHeight",{get:function(){return re(this.mudmanSize/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttRadius",{get:function(){return re(this.mudmanSize/4)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttBottomY",{get:function(){return this.bodyBottomY+this.buttRadius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttLeftInnerX",{get:function(){return this.bodyLeftX+this.buttRadius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"buttRightInnerX",{get:function(){return this.bodyRightX-this.buttRadius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"legWidth",{get:function(){return re(this.mudmanSize/4)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"legHeight",{get:function(){return re(this.mudmanSize/2)},enumerable:!1,configurable:!0}),t.prototype.drawUpperBody=function(t,e){var r=this,n=r.bodyWidth,o=r.bodyCenterX,i=r.bodyTopY,a=r.bodyBottomY,l=r.bodyLeftX,c=r.bodyRightX,s=r.buttRadius,u=r.buttBottomY,h=r.buttLeftInnerX,f=r.buttRightInnerX;t.fillStyle=Xt,t.beginPath(),t.arc(o,i,re(n/2),0,Math.PI,!0),t.lineTo(l,a),t.arcTo(l,u,h,u,s),t.lineTo(h,u),e?t.lineTo(c,u):(t.lineTo(f,u),t.arcTo(c,u,c,a,s),t.lineTo(c,a)),t.lineTo(c,i),t.closePath(),t.fill()},t.prototype.drawFace=function(t){var e=this,r=e.bodyWidth,n=e.bodyTopY,o=e.bodyRightX,i=re(.33*r),a=re(.3*i),l=o-i-re((r-i)/6),c=n,s=l-i+2*a,u=l+i-re(1.5*a);if(t.fillStyle="rgb(244, 164, 96)",t.beginPath(),t.arc(l,c,i,0,2*Math.PI),t.fill(),t.fillStyle=Xt,t.beginPath(),t.arc(l,c,i+1,-.2*Math.PI,-.8*Math.PI,!0),t.closePath(),t.fill(),t.fillStyle=zt,t.beginPath(),t.arc(s,c,a,0,2*Math.PI),t.fill(),t.beginPath(),t.arc(u,c,a,0,2*Math.PI),t.fill(),r>24){var h=u-s+2*a,f=a,p=s-a,d=c-re(.75*a)-f,y=u-s-3*a,_=a,T=l-re(.5*y),g=c+re(1.5*a);t.fillStyle=Xt,t.fillRect(p,d,h,f),t.fillStyle="rgb(200, 50, 0)",t.fillRect(T,g,y,_)}},t.prototype.drawSimpleFace=function(t,e){var r,n=this,o=n.bodyWidth,i=n.bodyTopY,a=n.bodyRightX,l=n.bodyCenterX,c=re(.33*o),s=re(.3*c),u=i,h=(r=e?a-c:l)+c,f=r-c+re(c/2),p=h-re(c/2);t.fillStyle=zt,t.beginPath(),t.arc(f,u,s,0,2*Math.PI),t.fill(),t.beginPath(),t.arc(p,u,s,0,2*Math.PI),t.fill()},t.prototype.drawStanding=function(t,e){this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1);var r=this,n=r.buttLeftInnerX,o=r.buttRightInnerX,i=r.buttRadius,a=r.bodyBottomY,l=r.legWidth,c=r.legHeight;t.fillStyle=Xt,t.fillRect(n-re(l/2),a,l,c+i),t.fillRect(o-re(l/2),a,l,c+i)},t.prototype.drawStandingRight=function(t,e){this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0);var r=this,n=r.bodyRightX,o=r.buttLeftInnerX,i=r.buttBottomY,a=r.legWidth,l=r.legHeight;t.fillStyle=Xt,t.fillRect(o,i,a,l),t.fillRect(n-a,i,a,l)},t.prototype.drawSitting=function(t,e){var r=this,n=r.buttLeftInnerX,o=r.buttRightInnerX,i=r.buttBottomY,a=r.legWidth,l=r.legHeight;if(t.save(),t.translate(0,l),this.drawUpperBody(t,!1),e){this.drawSimpleFace(t,!1),t.fillStyle=Xt;var c=n-re(a/2),s=n,u=o-re(a/2),h=o,f=i-re(.75*l),p=f+l,d=re(a/2);t.fillRect(c,f,a,l),t.beginPath(),t.arc(s,p,d,0,Math.PI),t.fill(),t.fillStyle=Ut,t.beginPath(),t.arc(s,p,d,0,2*Math.PI),t.fill(),t.fillStyle=Xt,t.fillRect(u,f,a,l),t.beginPath(),t.arc(h,p,d,0,Math.PI),t.fill(),t.fillStyle=Ut,t.beginPath(),t.arc(h,p,d,0,2*Math.PI),t.fill(),t.restore()}},t.prototype.drawSittingRight=function(t,e){var r=this,n=r.bodyCenterX,o=r.bodyRightX,i=r.buttBottomY,a=r.legWidth,l=r.legHeight;t.save(),t.translate(0,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0),t.fillStyle=Xt;var c=re(a/2),s=o-re(l/2),u=i-a,h=i,f=s+l;if(t.fillRect(s,i-a,l,a),t.beginPath(),t.arc(f,u,c,Math.PI,0),t.lineTo(f+c,h-c),t.arc(f,h-c,c,0,.5*Math.PI),t.fill(),!e)return t.fillStyle=Ut,t.beginPath(),t.arc(o,u-c,c,.5*Math.PI,0,!0),t.lineTo(o+c,u-a),t.arc(o,u-a,c,0,-.5*Math.PI,!0),void t.fill();var p=re(1.5*a),d=re(p/2),y=n-re(p/2),_=n,T=_+re(p/2),g=i-re(.75*l),v=g+l;t.fillRect(y,g,p,l),t.beginPath(),t.arc(_,v,d,0,Math.PI),t.fill(),t.fillStyle=Ut,t.beginPath(),t.arc(T-c,v+d-c,c,Math.PI,0,!0),t.lineTo(T,v-re(.25*a)),t.arc(T-c,v-re(.25*a),c,0,Math.PI,!0),t.closePath(),t.fill()},t.prototype.drawWalking1=function(t,e){var r=this,n=r.buttLeftInnerX,o=r.buttRightInnerX,i=r.buttRadius,a=r.bodyBottomY,l=r.legWidth,c=r.legHeight;t.fillStyle=Xt,t.fillRect(n-re(l/2),a,l,c+i),t.fillStyle=Ut,t.fillRect(o-re(l/2),a-re(.75*c),l,c+i),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalking2=function(t,e){var r=this,n=r.buttLeftInnerX,o=r.buttRightInnerX,i=r.buttRadius,a=r.bodyBottomY,l=r.legWidth,c=r.legHeight;t.fillStyle=Ut,t.fillRect(n-re(l/2),a-re(.5*c),l,c+i),t.fillStyle=Xt,t.fillRect(o-re(l/2),a-re(.5*c),l,c+i),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalking3=function(t,e){var r=this,n=r.buttLeftInnerX,o=r.buttRightInnerX,i=r.buttRadius,a=r.bodyBottomY,l=r.legWidth,c=r.legHeight;t.fillStyle=Ut,t.fillRect(n-re(l/2),a-re(.75*c),l,c+i),t.fillStyle=Xt,t.fillRect(o-re(l/2),a,l,c+i),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalking4=function(t,e){var r=this,n=r.buttLeftInnerX,o=r.buttRightInnerX,i=r.buttRadius,a=r.bodyBottomY,l=r.legWidth,c=r.legHeight;t.fillStyle=Xt,t.fillRect(n-re(l/2),a-re(.5*c),l,c+i),t.fillStyle=Ut,t.fillRect(o-re(l/2),a-re(.5*c),l,c+i),this.drawUpperBody(t,!1),e&&this.drawSimpleFace(t,!1)},t.prototype.drawWalkingRight1=function(t,e){var r=this,n=r.bodyRightX,o=r.buttLeftInnerX,i=r.buttBottomY,a=r.legWidth,l=r.legHeight;t.fillStyle=Xt,t.fillRect(o,i-re(l/2),a,l),t.fillStyle=Xt,t.fillRect(n-a,i,a,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.drawWalkingRight2=function(t,e){var r=this,n=r.buttLeftInnerX,o=r.bodyCenterX,i=r.buttBottomY,a=r.legWidth,l=r.legHeight;t.fillStyle=Ut,t.fillRect(n+re(a/2),i-re(.75*l),a,l),t.fillStyle=Xt,t.fillRect(o+re(.25*a),i,a,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.drawWalkingRight3=function(t,e){var r=this,n=r.buttLeftInnerX,o=r.bodyCenterX,i=r.buttBottomY,a=r.legWidth,l=r.legHeight;t.fillStyle=Ut,t.fillRect(o+re(.25*a),i-re(.75*l),a,l),t.fillStyle=Xt,t.fillRect(n+re(a/2),i,a,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.drawWalkingRight4=function(t,e){var r=this,n=r.bodyRightX,o=r.buttLeftInnerX,i=r.buttBottomY,a=r.legWidth,l=r.legHeight;t.fillStyle=Xt,t.fillRect(o,i,a,l),t.fillStyle=Xt,t.fillRect(n-a,i-re(l/2),a,l),this.drawUpperBody(t,!0),e&&this.drawSimpleFace(t,!0)},t.prototype.addStandingSprites=function(){var t=this;this.spriteRenderer.addSprite(Dt.STANDING_BACK,0,(function(e){t.drawStanding(e,!1)})),this.spriteRenderer.addSprite(Dt.STANDING_FRONT,0,(function(e){t.drawStanding(e,!0)})),this.spriteRenderer.addSprite(Dt.STANDING_RIGHT_BACK,0,(function(e){t.drawStandingRight(e,!1)})),this.spriteRenderer.addSprite(Dt.STANDING_RIGHT_FRONT,0,(function(e){t.drawStandingRight(e,!0)})),this.spriteRenderer.mirrorSprite(Dt.STANDING_RIGHT_BACK,Dt.STANDING_LEFT_BACK),this.spriteRenderer.mirrorSprite(Dt.STANDING_RIGHT_FRONT,Dt.STANDING_LEFT_FRONT)},t.prototype.addSittingSprites=function(){var t=this;this.spriteRenderer.addSprite(Dt.SITTING_BACK,0,(function(e){t.drawSitting(e,!1)})),this.spriteRenderer.addSprite(Dt.SITTING_FRONT,0,(function(e){t.drawSitting(e,!0)})),this.spriteRenderer.addSprite(Dt.SITTING_RIGHT_BACK,0,(function(e){t.drawSittingRight(e,!1)})),this.spriteRenderer.addSprite(Dt.SITTING_RIGHT_FRONT,0,(function(e){t.drawSittingRight(e,!0)})),this.spriteRenderer.mirrorSprite(Dt.SITTING_RIGHT_BACK,Dt.SITTING_LEFT_BACK),this.spriteRenderer.mirrorSprite(Dt.SITTING_RIGHT_FRONT,Dt.SITTING_LEFT_FRONT)},t.prototype.addWalkingSprites=function(){var t=this;this.spriteRenderer.addSprite(Dt.WALKING_1_BACK,0,(function(e){t.drawWalking1(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_2_BACK,0,(function(e){t.drawWalking2(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_3_BACK,0,(function(e){t.drawWalking3(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_4_BACK,0,(function(e){t.drawWalking4(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_1_FRONT,0,(function(e){t.drawWalking1(e,!0)})),this.spriteRenderer.addSprite(Dt.WALKING_2_FRONT,0,(function(e){t.drawWalking2(e,!0)})),this.spriteRenderer.addSprite(Dt.WALKING_3_FRONT,0,(function(e){t.drawWalking3(e,!0)})),this.spriteRenderer.addSprite(Dt.WALKING_4_FRONT,0,(function(e){t.drawWalking4(e,!0)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_1_BACK,0,(function(e){t.drawWalkingRight1(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_2_BACK,0,(function(e){t.drawWalkingRight2(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_3_BACK,0,(function(e){t.drawWalkingRight3(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_4_BACK,0,(function(e){t.drawWalkingRight4(e,!1)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_1_FRONT,0,(function(e){t.drawWalkingRight1(e,!0)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_2_FRONT,0,(function(e){t.drawWalkingRight2(e,!0)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_3_FRONT,0,(function(e){t.drawWalkingRight3(e,!0)})),this.spriteRenderer.addSprite(Dt.WALKING_RIGHT_4_FRONT,0,(function(e){t.drawWalkingRight4(e,!0)})),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_1_BACK,Dt.WALKING_LEFT_1_BACK),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_2_BACK,Dt.WALKING_LEFT_2_BACK),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_3_BACK,Dt.WALKING_LEFT_3_BACK),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_4_BACK,Dt.WALKING_LEFT_4_BACK),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_1_FRONT,Dt.WALKING_LEFT_1_FRONT),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_2_FRONT,Dt.WALKING_LEFT_2_FRONT),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_3_FRONT,Dt.WALKING_LEFT_3_FRONT),this.spriteRenderer.mirrorSprite(Dt.WALKING_RIGHT_4_FRONT,Dt.WALKING_LEFT_4_FRONT)},t.prototype.mirrorRenderer=function(t){var e=this.canvasWidth,r=this.canvasHeight,n=new Ht(document.createElement("canvas"),e,r,t.fps);return n.drawOnce((function(n){n.save(),n.scale(-1,1),n.drawImage(t.canvas,0,0,-1*e,r),n.restore()})),n},t.prototype.drawMudman=function(t,e,r,n,o){var i,a=e.local.data,l=a.xDirection,c=a.yDirection;if(e.local.hasPath){var s=re(o%200*4/200);i=(0===l?c<0?Qt:Jt:l<0?c<0?ee:te:c<0?$t:Zt)[s]}else i=e.local.data.sitting?0===l?c<0?Dt.SITTING_BACK:Dt.SITTING_FRONT:l<0?c<0?Dt.SITTING_LEFT_BACK:Dt.SITTING_LEFT_FRONT:c<0?Dt.SITTING_RIGHT_BACK:Dt.SITTING_RIGHT_FRONT:0===l?c<0?Dt.STANDING_BACK:Dt.STANDING_FRONT:l<0?c<0?Dt.STANDING_LEFT_BACK:Dt.STANDING_LEFT_FRONT:c<0?Dt.STANDING_RIGHT_BACK:Dt.STANDING_RIGHT_FRONT;this.spriteRenderer.drawSprite(i,t,r,n,0,-.25*this.mudmanSize)},t}();var oe,ie;function ae(t,e){return e===oe.NONE?t===oe.NONE:(t&e)===e}!function(t){t[t.NONE=0]="NONE",t[t.TOP_LEFT=128]="TOP_LEFT",t[t.TOP=64]="TOP",t[t.TOP_RIGHT=32]="TOP_RIGHT",t[t.RIGHT=16]="RIGHT",t[t.BOTTOM_RIGHT=8]="BOTTOM_RIGHT",t[t.BOTTOM=4]="BOTTOM",t[t.BOTTOM_LEFT=2]="BOTTOM_LEFT",t[t.LEFT=1]="LEFT"}(oe||(oe={})),function(t){t[t.FLAME_1=0]="FLAME_1",t[t.FLAME_2=1]="FLAME_2",t[t.FLAME_3=2]="FLAME_3",t[t.FLAME_4=3]="FLAME_4",t[t.FLAME_5=4]="FLAME_5",t[t.FLAME_6=5]="FLAME_6",t[t.FLAME_7=6]="FLAME_7",t[t.FLAME_8=7]="FLAME_8"}(ie||(ie={}));var le,ce=[ie.FLAME_1,ie.FLAME_2,ie.FLAME_3,ie.FLAME_4,ie.FLAME_5,ie.FLAME_6,ie.FLAME_7,ie.FLAME_8];!function(t){t[t.EMPTY=0]="EMPTY",t[t.WATER_FULL=1]="WATER_FULL",t[t.WATER_PARTIAL=2]="WATER_PARTIAL"}(le||(le={}));var se=function(t){return Math.floor(t)},ue=function(){function t(t,e,r){var n=this;void 0===r&&(r=24),this.heroIndex=0,this.world=e,this.worldRenderer=new Ht(document.createElement("canvas"),e.data.map.width,e.data.map.height,r),this.spaceRenderer=new Ht(document.createElement("canvas"),t.width,t.height,r),this.viewportRenderer=new Ht(t,t.width,t.height,r),this.hudRenderer=new Ht(document.createElement("canvas"),t.width,t.height,6),this.nightRenderer=new Ht(document.createElement("canvas"),t.width,t.height,r),this.firelightRenderer=new Ht(document.createElement("canvas"),this.firelightSize,this.firelightSize,12),this.flameRenderer=new kt(this.tileSize,2*this.tileSize,r),this.bottleRenderer=new kt(se(this.tileSize/2.5),se(this.tileSize/2),r);var o=function(t,e,r,n,o){var i,a,l=se(.1*e+.25*Math.random()*e),c=se(l/2),s=(Math.random()-.5)*l,u=(i=Math.random(),void 0===a&&(a=.5),(1-H(1-i,a)-.5)*l),h=Math.random()*(2*Math.PI),f=se(r-c+s),p=se(n-c+u);t.translate(r,n),t.rotate(h),t.translate(-1*r,-1*n),t.fillStyle=o,t.globalAlpha=.25+.75*Math.random(),t.fillRect(f,p,l,l),t.globalAlpha=1,t.setTransform(1,0,0,1,0,0)};ce.forEach((function(t){n.flameRenderer.addSprite(t,0,(function(t,e,r,n,i,a,l,c,s){o(t,e,n,i,"red"),o(t,e,n,i,"yellow"),o(t,e,n,i,"orange"),o(t,e/2,n,i-se(.25*Math.random()*r),"red"),o(t,e/2,n,i-se(.25*Math.random()*r),"red")}))}));var i=function(t,e,r,n,o,i,a,l){var c=se(t/2),s=r-se(c/2),u=r+se(c/2),h=se(t/4),f=o+se(e/8),p=o+se(e/4),d=se((p-f)/2),y=new Path2D;return y.moveTo(s,o),y.lineTo(u,o),y.lineTo(u,f),y.arc(u,f+d,d,-.5*Math.PI,.5*Math.PI,!0),y.lineTo(i,p),y.lineTo(i,a-h),y.arc(i-h,a-h,h,0,.5*Math.PI),y.lineTo(l+h,a),y.arc(l+h,a-h,h,.5*Math.PI,Math.PI),y.lineTo(l,p),y.lineTo(l+se((t-c)/2),p),y.arc(s,f+d,d,.5*Math.PI,-.5*Math.PI,!0),y.lineTo(s,o),y.closePath(),y};this.bottleRenderer.addSprite(le.EMPTY,1,(function(t,e,r,n,o,a,l,c,s){var u=i(e,r,n,0,a,l,c,s);t.strokeStyle=Vt,t.lineWidth=1,t.stroke(u)})),this.bottleRenderer.addSprite(le.WATER_FULL,1,(function(t,e,r,n,o,a,l,c,s){var u=i(e,r,n,0,a,l,c,s);t.save(),t.clip(u),t.fillStyle=Yt,t.fillRect(s,a+se(r/4),e,r),t.restore(),t.strokeStyle=Vt,t.lineWidth=1,t.stroke(u)})),this.bottleRenderer.addSprite(le.WATER_PARTIAL,1,(function(t,e,r,n,o,a,l,c,s){var u=i(e,r,n,0,a,l,c,s);t.save(),t.clip(u),t.fillStyle=Yt,t.fillRect(s,c-se(r/4),e,r),t.restore(),t.strokeStyle=Vt,t.lineWidth=1,t.stroke(u)})),this.mudmanRenderer=new ne(16,r);var a=function(t,e){if("number"!=typeof t||"number"!=typeof e){var r=n.world.data.map.randomCoordsOnLand();t=r[0],e=r[1]}var o=new jt(t,e,20*n.world.data.map.tileSize,16);n.world.data.mudmen.push(o)};a(350,200);for(var l=0;l<0;l++)a()}return Object.defineProperty(t.prototype,"fps",{set:function(t){this.viewportRenderer.fps=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hero",{get:function(){return this.world.data.mudmen[this.heroIndex]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"worldWidth",{get:function(){return this.worldRenderer.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"worldHeight",{get:function(){return this.worldRenderer.canvas.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spaceWidth",{get:function(){return this.spaceRenderer.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"spaceHeight",{get:function(){return this.spaceRenderer.canvas.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportWidth",{get:function(){return this.viewportRenderer.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportHeight",{get:function(){return this.viewportRenderer.canvas.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"tileSize",{get:function(){return this.world.data.map.tileSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"firelightSize",{get:function(){return 4*this.tileSize},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"nightCtx",{get:function(){return this.nightRenderer.ctx},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportOriginX",{get:function(){return this.hero.local.x-se(this.viewportWidth/2)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"viewportOriginY",{get:function(){return this.hero.local.y-se(this.viewportHeight/2)},enumerable:!1,configurable:!0}),t.prototype.eachTileInViewport=function(t,e,r){for(var n=this.world.data.map,o=this.tileSize,i=Math.max(0,n.xToCol(t)),a=Math.min(n.colCount-1,n.xToCol(t+this.viewportWidth)),l=Math.max(0,n.yToRow(e)),c=Math.min(n.rowCount-1,n.yToRow(e+this.viewportHeight)),s=i;s<=a;s++)for(var u=l;u<=c;u++){var h=s*o,f=u*o;r(u,s,h,f,h-t,f-e,o)}},t.prototype.drawShoreline=function(t,e,r,n,o,i,a,l,c){void 0===a&&(a=0),void 0===l&&(l=200),void 0===c&&(c=0);var s=function(t,e,r,n){var o,i,a=oe.NONE;return o=e-n,i=t-n,r.underwaterAt(i,o)||(a|=oe.TOP_LEFT),i=t,r.underwaterAt(i,o)||(a|=oe.TOP),i=t+n,r.underwaterAt(i,o)||(a|=oe.TOP_RIGHT),o=e,i=t-n,r.underwaterAt(i,o)||(a|=oe.LEFT),i=t+n,r.underwaterAt(i,o)||(a|=oe.RIGHT),o=e+n,i=t-n,r.underwaterAt(i,o)||(a|=oe.BOTTOM_LEFT),i=t,r.underwaterAt(i,o)||(a|=oe.BOTTOM),i=t+n,r.underwaterAt(i,o)||(a|=oe.BOTTOM_RIGHT),a}(e,r,this.world.data.map,i);if(!ae(s,oe.NONE)){var u,h,f,p,d=i/2,y=n,_=y+i,T=o,g=o+i,v=y+d,w=o+d,b=i/4,I=T+b,R=T+(i-b),O=y+b,A=y+(i-b),m=ae(s,oe.TOP),N=ae(s,oe.RIGHT),S=ae(s,oe.BOTTOM),P=ae(s,oe.LEFT);if(t.fillStyle="rgb("+a+", "+l+", "+c+")",m){if(t.fillRect(y,T,i,b),S){if(t.fillRect(y,R,i,b),N||P){N&&t.fillRect(v,T,d,i),P&&t.fillRect(y,T,d,i);var L=t.fillStyle;t.fillStyle="rgb(0, 100, 200)",t.beginPath(),t.arc(v,w,b,0,2*Math.PI),t.fill(),t.fillStyle=L}return}if(N)return t.beginPath(),t.moveTo(v,T),t.lineTo(v,I),t.arcTo(A,I,A,g,b),t.lineTo(A,g),t.lineTo(_,g),t.lineTo(_,T),t.closePath(),t.fill(),P?(t.beginPath(),t.moveTo(v,T),t.lineTo(v,I),t.arcTo(O,I,O,g,b),t.lineTo(O,g),t.lineTo(y,g),t.lineTo(y,T),t.closePath(),void t.fill()):(null!=p||(p=ae(s,oe.BOTTOM_LEFT)),void(p&&(t.beginPath(),t.arc(y,g,b,-.5*Math.PI,0),t.lineTo(y,g),t.closePath(),t.fill())));if(P)return t.beginPath(),t.moveTo(v,T),t.lineTo(v,I),t.arcTo(O,I,O,g,b),t.lineTo(O,g),t.lineTo(y,g),t.lineTo(y,T),t.closePath(),t.fill(),null!=f||(f=ae(s,oe.BOTTOM_RIGHT)),void(f&&(t.beginPath(),t.arc(_,g,b,Math.PI,-.5*Math.PI),t.lineTo(_,g),t.closePath(),t.fill()));null!=p||(p=ae(s,oe.BOTTOM_LEFT)),null!=f||(f=ae(s,oe.BOTTOM_RIGHT)),p&&(t.beginPath(),t.arc(y,g,b,-.5*Math.PI,0),t.lineTo(y,g),t.closePath(),t.fill()),f&&(t.beginPath(),t.arc(_,g,b,Math.PI,-.5*Math.PI),t.lineTo(_,g),t.closePath(),t.fill())}else if(S){if(t.fillRect(y,R,i,b),P)return t.beginPath(),t.moveTo(v,g),t.lineTo(v,R),t.arcTo(O,R,O,T,b),t.lineTo(O,T),t.lineTo(y,T),t.lineTo(y,g),t.closePath(),t.fill(),N?(t.beginPath(),t.moveTo(v,g),t.lineTo(v,R),t.arcTo(A,R,A,T,b),t.lineTo(A,T),t.lineTo(_,T),t.lineTo(_,g),t.closePath(),void t.fill()):(null!=h||(h=ae(s,oe.TOP_RIGHT)),void(h&&(t.beginPath(),t.arc(_,T,b,.5*Math.PI,Math.PI),t.lineTo(_,T),t.closePath(),t.fill())));if(N)return t.beginPath(),t.moveTo(v,g),t.lineTo(v,R),t.arcTo(A,R,A,T,b),t.lineTo(A,T),t.lineTo(_,T),t.lineTo(_,g),t.closePath(),t.fill(),null!=u||(u=ae(s,oe.TOP_LEFT)),void(u&&(t.beginPath(),t.arc(y,T,b,0,.5*Math.PI),t.lineTo(y,T),t.closePath(),t.fill()));null!=u||(u=ae(s,oe.TOP_LEFT)),null!=h||(h=ae(s,oe.TOP_RIGHT)),u&&(t.beginPath(),t.arc(y,T,b,0,.5*Math.PI),t.lineTo(y,T),t.closePath(),t.fill()),h&&(t.beginPath(),t.arc(_,T,b,.5*Math.PI,Math.PI),t.lineTo(_,T),t.closePath(),t.fill())}else if(P){if(t.fillRect(y,T,b,i),N)return void t.fillRect(A,T,b,i);null!=h||(h=ae(s,oe.TOP_RIGHT)),null!=f||(f=ae(s,oe.BOTTOM_RIGHT)),h&&(t.beginPath(),t.arc(_,T,b,.5*Math.PI,Math.PI),t.lineTo(_,T),t.closePath(),t.fill()),f&&(t.beginPath(),t.arc(_,g,b,Math.PI,-.5*Math.PI),t.lineTo(_,g),t.closePath(),t.fill())}else N?(t.fillRect(A,T,b,i),null!=u||(u=ae(s,oe.TOP_LEFT)),null!=p||(p=ae(s,oe.BOTTOM_LEFT)),u&&(t.beginPath(),t.arc(y,T,b,0,.5*Math.PI),t.lineTo(y,T),t.closePath(),t.fill()),p&&(t.beginPath(),t.arc(y,g,b,-.5*Math.PI,0),t.lineTo(y,g),t.closePath(),t.fill())):(null!=u||(u=ae(s,oe.TOP_LEFT)),null!=p||(p=ae(s,oe.BOTTOM_LEFT)),null!=h||(h=ae(s,oe.TOP_RIGHT)),null!=f||(f=ae(s,oe.BOTTOM_RIGHT)),u&&(t.beginPath(),t.arc(y,T,b,0,.5*Math.PI),t.lineTo(y,T),t.closePath(),t.fill()),h&&(t.beginPath(),t.arc(_,T,b,.5*Math.PI,Math.PI),t.lineTo(_,T),t.closePath(),t.fill()),f&&(t.beginPath(),t.arc(_,g,b,Math.PI,-.5*Math.PI),t.lineTo(_,g),t.closePath(),t.fill()),p&&(t.beginPath(),t.arc(y,g,b,-.5*Math.PI,0),t.lineTo(y,g),t.closePath(),t.fill()))}},t.prototype.drawTile=function(t,e,r,n,o,i,a,l){var c=r*n,s=e*n,u=o/1.5,h=i,f=o/2.5;if(l)t.fillStyle="rgb(0, 100, 200)",t.fillRect(c,s,n,n),this.drawShoreline(t,c,s,c,s,n,u,h,f);else{var p=function(t){return 255*H(Math.max((t-195)/60,0),.75)}(o),d=se(Math.max(p,u)),y=se(Math.max(p,h)),_=se(Math.max(p,f));t.fillStyle="rgb("+d+", "+y+", "+_+")",t.fillRect(c,s,n,n)}t.strokeStyle="rgba(0, 0, 0, 0.05)",t.strokeRect(c,s,n,n)},t.prototype.drawWorld=function(){var t=this;this.worldRenderer.drawOnce((function(e,r){e.clearRect(0,0,t.worldWidth,t.worldHeight);var n=t.tileSize;t.world.data.map.eachTile((function(r,o,i,a,l,c){t.drawTile(e,r,o,n,i,a,l,c)}))}))},t.prototype.drawSpace=function(){var t=this;this.spaceRenderer.drawOnce((function(e,r){var n=t,o=n.spaceWidth,i=n.spaceHeight;e.clearRect(0,0,o,i);for(var a=0;a<1e3;a++){var l=se(Math.random()*o),c=se(Math.random()*i),s=se(4*(1-Math.sqrt(Math.random()))),u=Math.sqrt(Math.random()).toFixed(2);e.fillStyle="rgba(255, 255, 255, "+u+")",e.fillRect(l,c,s,s)}}))},t.prototype.createEmptyFillBar=function(t,e,r,n){var o=e+n,i=t+se(r/2),a=i+se(r/2),l=se(r/2),c=e+l,s=o-l,u=new Path2D;return u.arc(i,c,l,Math.PI,0),u.lineTo(a,s),u.arc(i,s,l,0,Math.PI),u.lineTo(t,c),u},t.prototype.drawHud=function(){var t=this,e=this,r=e.tileSize,n=e.viewportWidth,o=e.viewportHeight,i=se(r/4),a=se(1.5*r),l=se(r/2),c=l+a,s=n-se(r/2)-se(i/2),u=this.createEmptyFillBar(s,l,i,a);this.hudRenderer.drawOnce((function(t,e){t.clip(u)})),this.hudRenderer.drawLoop((function(e,r){e.clearRect(0,0,n,o);var l=se(t.hero.local.percentHydrated*a),h=c-l;e.fillStyle="rgba(0, 0, 0, 0.25)",e.fill(u),e.fillStyle=Yt,e.fillRect(s,h,i,l),e.strokeStyle=Vt,e.lineWidth=2,e.stroke(u)}))},t.prototype.drawFirelight=function(){var t=this,e=this.firelightSize,r=se(e/2),n=r,o=r;this.firelightRenderer.drawLoop((function(i,a){var l=t.world.daylight;if(1!==l){i.clearRect(0,0,e,e);var c=(1-l)*(r*(.9+.1*Math.random())),s=i.createRadialGradient(n,o,se(c/5),n,o,c);s.addColorStop(0,Vt),s.addColorStop(.2,Vt),s.addColorStop(.4,qt),s.addColorStop(.6,qt),s.addColorStop(.75,"rgba(255, 255, 255, 0.25)"),s.addColorStop(1,"transparent"),i.fillStyle=s,i.fillRect(0,0,e,e)}}))},t.prototype.drawNightInto=function(t,e){var r=this,o=this.world.daylight;if(1!==o){var i=this,a=i.nightCtx,l=i.viewportWidth,c=i.viewportHeight,s=i.viewportOriginX,u=i.viewportOriginY,h=i.firelightSize;a.clearRect(0,0,l,c),a.fillStyle="rgb(0, 0, 0)",a.fillRect(0,0,l,c);var f=a.globalCompositeOperation;a.globalCompositeOperation="destination-out";var p=this.firelightRenderer.canvas,d=se(h/2);this.world.data.items.forEachOfType(N.FIRE,(function(o){if(n(o.x,o.y,s,u,l,c)){var i=o.x-s,f=o.y-u;a.drawImage(p,0,0,h,h,i-d,f-d,h,h);var y=ce[se(ce.length*(e%2e3/2e3))];r.flameRenderer.drawSprite(y,t,i,f-2)}})),a.globalCompositeOperation=f,t.globalAlpha=.35*(1-o),t.drawImage(this.nightRenderer.canvas,0,0,l,c,0,0,l,c),t.globalAlpha=1}},t.prototype.drawLoop=function(){var t=this,e=this,r=e.viewportWidth,o=e.viewportHeight,i=e.worldWidth,a=e.worldHeight,l=e.spaceWidth,c=e.spaceHeight;this.viewportRenderer.drawLoop((function(e,s){t.world.data.timestamp=s,e.fillStyle="black",e.fillRect(0,0,r,o);var u=t,h=u.viewportOriginX,f=u.viewportOriginY;if(h<0||f<0||h+r>i||f+o>a){e.drawImage(t.spaceRenderer.canvas,0,0,l,c,0,0,r,o);var p=h<0?Math.abs(h):0,d=f<0?Math.abs(f):0,y=h+r>i?i-h:r,_=f+o>a?a-f:o,T=se(r/40);e.fillStyle="rgba(0, 0, 0, 0.5)",e.fillRect(p-T/2,d-T/2,y+T,_+T),e.fillRect(p-T,d-T,y+2*T,_+2*T),e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowColor="rgb(0, 0, 255)",e.shadowBlur=50,e.fillStyle="rgb(0, 0, 255)",e.fillRect(p-.5,d-.5,y+1,_+1),e.shadowOffsetX=0,e.shadowOffsetY=0,e.shadowColor="transparent",e.shadowBlur=0}e.drawImage(t.worldRenderer.canvas,h,f,r,o,0,0,r,o),t.world.data.items.forEachOfType(N.WATER,(function(i){if(!i.used&&!i.held&&n(i.x,i.y,h,f,r,o)){var a=i.x-h,l=i.y-f;t.bottleRenderer.drawSprite(le.WATER_FULL,e,a,l)}})),t.world.data.items.forEachOfType(N.FIRE,(function(t){if(n(t.x,t.y,h,f,r,o)){var i=t.x-h,a=t.y-f;e.fillStyle=Ut,e.fillRect(i-5,a-5,10,10),e.fillStyle="orangered",e.fillRect(i-4,a-5,8,6)}})),t.world.data.mudmen.forEach((function(i){n(i.local.x,i.local.y,h,f,r,o)&&(t.mudmanRenderer.drawMudman(e,i,i.local.x-h,i.local.y-f,s),i.tick())})),t.drawNightInto(e,s),e.drawImage(t.hudRenderer.canvas,0,0,r,o,0,0,r,o);var g=t.hero.local.destination;if(g){var v=s%500/500;e.strokeStyle=zt,e.globalAlpha=1-v,e.beginPath(),e.arc(g.x-h,g.y-f,se(.5*t.tileSize*v),0,2*Math.PI),e.stroke(),e.globalAlpha=1}}))},t.prototype.start=function(){this.drawWorld(),this.drawSpace(),this.drawHud(),this.drawFirelight(),this.drawLoop()},t.prototype.nextHero=function(){this.heroIndex=(this.heroIndex+1)%this.world.data.mudmen.length},t.prototype.prevHero=function(){this.heroIndex=0===this.heroIndex?this.world.data.mudmen.length-1:this.heroIndex-1},t}();const he=ue;window.addEventListener("DOMContentLoaded",(function(){var t=document.getElementById("viewport"),e=new he(t,j,24);e.start(),document.body.addEventListener("keydown",(function(t){"ArrowRight"===t.key?e.nextHero():"ArrowLeft"===t.key&&e.prevHero()})),t.addEventListener("click",(function(t){var r=e.hero.local,n=r.x,o=r.y,i=r.data,a=n-e.viewportWidth/2,l=o-e.viewportHeight/2,c=a+t.offsetX,s=l+t.offsetY;e.world.data.map.populatePath(i.path,n,o,c,s,i.eyesight)})),window.renderer=e,window.pathFinder=e.world.data.map.pathFinder}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,